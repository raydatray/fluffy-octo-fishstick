// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/user"
)

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	FirstName                   string
	MiddleName                  *string
	LastName                    string
	Email                       string
	Password                    string
	Role                        *user.Role
	PostIDs                     []int
	ReplyIDs                    []int
	TeachingSectionIDs          []int
	TeachingAssistantSectionIDs []int
	CourseAssistantSectionIDs   []int
	EnrolledSectionIDs          []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetFirstName(i.FirstName)
	if v := i.MiddleName; v != nil {
		m.SetMiddleName(*v)
	}
	m.SetLastName(i.LastName)
	m.SetEmail(i.Email)
	m.SetPassword(i.Password)
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.PostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.ReplyIDs; len(v) > 0 {
		m.AddReplyIDs(v...)
	}
	if v := i.TeachingSectionIDs; len(v) > 0 {
		m.AddTeachingSectionIDs(v...)
	}
	if v := i.TeachingAssistantSectionIDs; len(v) > 0 {
		m.AddTeachingAssistantSectionIDs(v...)
	}
	if v := i.CourseAssistantSectionIDs; len(v) > 0 {
		m.AddCourseAssistantSectionIDs(v...)
	}
	if v := i.EnrolledSectionIDs; len(v) > 0 {
		m.AddEnrolledSectionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	FirstName                         *string
	ClearMiddleName                   bool
	MiddleName                        *string
	LastName                          *string
	Email                             *string
	Password                          *string
	Role                              *user.Role
	ClearPosts                        bool
	AddPostIDs                        []int
	RemovePostIDs                     []int
	ClearReplies                      bool
	AddReplyIDs                       []int
	RemoveReplyIDs                    []int
	ClearTeachingSections             bool
	AddTeachingSectionIDs             []int
	RemoveTeachingSectionIDs          []int
	ClearTeachingAssistantSections    bool
	AddTeachingAssistantSectionIDs    []int
	RemoveTeachingAssistantSectionIDs []int
	ClearCourseAssistantSections      bool
	AddCourseAssistantSectionIDs      []int
	RemoveCourseAssistantSectionIDs   []int
	ClearEnrolledSections             bool
	AddEnrolledSectionIDs             []int
	RemoveEnrolledSectionIDs          []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearMiddleName {
		m.ClearMiddleName()
	}
	if v := i.MiddleName; v != nil {
		m.SetMiddleName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if i.ClearPosts {
		m.ClearPosts()
	}
	if v := i.AddPostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.RemovePostIDs; len(v) > 0 {
		m.RemovePostIDs(v...)
	}
	if i.ClearReplies {
		m.ClearReplies()
	}
	if v := i.AddReplyIDs; len(v) > 0 {
		m.AddReplyIDs(v...)
	}
	if v := i.RemoveReplyIDs; len(v) > 0 {
		m.RemoveReplyIDs(v...)
	}
	if i.ClearTeachingSections {
		m.ClearTeachingSections()
	}
	if v := i.AddTeachingSectionIDs; len(v) > 0 {
		m.AddTeachingSectionIDs(v...)
	}
	if v := i.RemoveTeachingSectionIDs; len(v) > 0 {
		m.RemoveTeachingSectionIDs(v...)
	}
	if i.ClearTeachingAssistantSections {
		m.ClearTeachingAssistantSections()
	}
	if v := i.AddTeachingAssistantSectionIDs; len(v) > 0 {
		m.AddTeachingAssistantSectionIDs(v...)
	}
	if v := i.RemoveTeachingAssistantSectionIDs; len(v) > 0 {
		m.RemoveTeachingAssistantSectionIDs(v...)
	}
	if i.ClearCourseAssistantSections {
		m.ClearCourseAssistantSections()
	}
	if v := i.AddCourseAssistantSectionIDs; len(v) > 0 {
		m.AddCourseAssistantSectionIDs(v...)
	}
	if v := i.RemoveCourseAssistantSectionIDs; len(v) > 0 {
		m.RemoveCourseAssistantSectionIDs(v...)
	}
	if i.ClearEnrolledSections {
		m.ClearEnrolledSections()
	}
	if v := i.AddEnrolledSectionIDs; len(v) > 0 {
		m.AddEnrolledSectionIDs(v...)
	}
	if v := i.RemoveEnrolledSectionIDs; len(v) > 0 {
		m.RemoveEnrolledSectionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
