// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/course"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/coursesection"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/predicate"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/user"
)

// CourseSectionUpdate is the builder for updating CourseSection entities.
type CourseSectionUpdate struct {
	config
	hooks    []Hook
	mutation *CourseSectionMutation
}

// Where appends a list predicates to the CourseSectionUpdate builder.
func (_u *CourseSectionUpdate) Where(ps ...predicate.CourseSection) *CourseSectionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetNumber sets the "number" field.
func (_u *CourseSectionUpdate) SetNumber(v int) *CourseSectionUpdate {
	_u.mutation.ResetNumber()
	_u.mutation.SetNumber(v)
	return _u
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (_u *CourseSectionUpdate) SetNillableNumber(v *int) *CourseSectionUpdate {
	if v != nil {
		_u.SetNumber(*v)
	}
	return _u
}

// AddNumber adds value to the "number" field.
func (_u *CourseSectionUpdate) AddNumber(v int) *CourseSectionUpdate {
	_u.mutation.AddNumber(v)
	return _u
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (_u *CourseSectionUpdate) SetCourseID(id int) *CourseSectionUpdate {
	_u.mutation.SetCourseID(id)
	return _u
}

// SetCourse sets the "course" edge to the Course entity.
func (_u *CourseSectionUpdate) SetCourse(v *Course) *CourseSectionUpdate {
	return _u.SetCourseID(v.ID)
}

// AddProfessorIDs adds the "professors" edge to the User entity by IDs.
func (_u *CourseSectionUpdate) AddProfessorIDs(ids ...int) *CourseSectionUpdate {
	_u.mutation.AddProfessorIDs(ids...)
	return _u
}

// AddProfessors adds the "professors" edges to the User entity.
func (_u *CourseSectionUpdate) AddProfessors(v ...*User) *CourseSectionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProfessorIDs(ids...)
}

// AddTeachingAssistantIDs adds the "teaching_assistants" edge to the User entity by IDs.
func (_u *CourseSectionUpdate) AddTeachingAssistantIDs(ids ...int) *CourseSectionUpdate {
	_u.mutation.AddTeachingAssistantIDs(ids...)
	return _u
}

// AddTeachingAssistants adds the "teaching_assistants" edges to the User entity.
func (_u *CourseSectionUpdate) AddTeachingAssistants(v ...*User) *CourseSectionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTeachingAssistantIDs(ids...)
}

// AddStudentIDs adds the "students" edge to the User entity by IDs.
func (_u *CourseSectionUpdate) AddStudentIDs(ids ...int) *CourseSectionUpdate {
	_u.mutation.AddStudentIDs(ids...)
	return _u
}

// AddStudents adds the "students" edges to the User entity.
func (_u *CourseSectionUpdate) AddStudents(v ...*User) *CourseSectionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStudentIDs(ids...)
}

// Mutation returns the CourseSectionMutation object of the builder.
func (_u *CourseSectionUpdate) Mutation() *CourseSectionMutation {
	return _u.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (_u *CourseSectionUpdate) ClearCourse() *CourseSectionUpdate {
	_u.mutation.ClearCourse()
	return _u
}

// ClearProfessors clears all "professors" edges to the User entity.
func (_u *CourseSectionUpdate) ClearProfessors() *CourseSectionUpdate {
	_u.mutation.ClearProfessors()
	return _u
}

// RemoveProfessorIDs removes the "professors" edge to User entities by IDs.
func (_u *CourseSectionUpdate) RemoveProfessorIDs(ids ...int) *CourseSectionUpdate {
	_u.mutation.RemoveProfessorIDs(ids...)
	return _u
}

// RemoveProfessors removes "professors" edges to User entities.
func (_u *CourseSectionUpdate) RemoveProfessors(v ...*User) *CourseSectionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProfessorIDs(ids...)
}

// ClearTeachingAssistants clears all "teaching_assistants" edges to the User entity.
func (_u *CourseSectionUpdate) ClearTeachingAssistants() *CourseSectionUpdate {
	_u.mutation.ClearTeachingAssistants()
	return _u
}

// RemoveTeachingAssistantIDs removes the "teaching_assistants" edge to User entities by IDs.
func (_u *CourseSectionUpdate) RemoveTeachingAssistantIDs(ids ...int) *CourseSectionUpdate {
	_u.mutation.RemoveTeachingAssistantIDs(ids...)
	return _u
}

// RemoveTeachingAssistants removes "teaching_assistants" edges to User entities.
func (_u *CourseSectionUpdate) RemoveTeachingAssistants(v ...*User) *CourseSectionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTeachingAssistantIDs(ids...)
}

// ClearStudents clears all "students" edges to the User entity.
func (_u *CourseSectionUpdate) ClearStudents() *CourseSectionUpdate {
	_u.mutation.ClearStudents()
	return _u
}

// RemoveStudentIDs removes the "students" edge to User entities by IDs.
func (_u *CourseSectionUpdate) RemoveStudentIDs(ids ...int) *CourseSectionUpdate {
	_u.mutation.RemoveStudentIDs(ids...)
	return _u
}

// RemoveStudents removes "students" edges to User entities.
func (_u *CourseSectionUpdate) RemoveStudents(v ...*User) *CourseSectionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStudentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CourseSectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CourseSectionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CourseSectionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CourseSectionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CourseSectionUpdate) check() error {
	if _u.mutation.CourseCleared() && len(_u.mutation.CourseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CourseSection.course"`)
	}
	return nil
}

func (_u *CourseSectionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(coursesection.Table, coursesection.Columns, sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Number(); ok {
		_spec.SetField(coursesection.FieldNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedNumber(); ok {
		_spec.AddField(coursesection.FieldNumber, field.TypeInt, value)
	}
	if _u.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesection.CourseTable,
			Columns: []string{coursesection.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesection.CourseTable,
			Columns: []string{coursesection.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProfessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.ProfessorsTable,
			Columns: coursesection.ProfessorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProfessorsIDs(); len(nodes) > 0 && !_u.mutation.ProfessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.ProfessorsTable,
			Columns: coursesection.ProfessorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfessorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.ProfessorsTable,
			Columns: coursesection.ProfessorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeachingAssistantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.TeachingAssistantsTable,
			Columns: coursesection.TeachingAssistantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTeachingAssistantsIDs(); len(nodes) > 0 && !_u.mutation.TeachingAssistantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.TeachingAssistantsTable,
			Columns: coursesection.TeachingAssistantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeachingAssistantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.TeachingAssistantsTable,
			Columns: coursesection.TeachingAssistantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.StudentsTable,
			Columns: coursesection.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !_u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.StudentsTable,
			Columns: coursesection.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.StudentsTable,
			Columns: coursesection.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coursesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CourseSectionUpdateOne is the builder for updating a single CourseSection entity.
type CourseSectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseSectionMutation
}

// SetNumber sets the "number" field.
func (_u *CourseSectionUpdateOne) SetNumber(v int) *CourseSectionUpdateOne {
	_u.mutation.ResetNumber()
	_u.mutation.SetNumber(v)
	return _u
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (_u *CourseSectionUpdateOne) SetNillableNumber(v *int) *CourseSectionUpdateOne {
	if v != nil {
		_u.SetNumber(*v)
	}
	return _u
}

// AddNumber adds value to the "number" field.
func (_u *CourseSectionUpdateOne) AddNumber(v int) *CourseSectionUpdateOne {
	_u.mutation.AddNumber(v)
	return _u
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (_u *CourseSectionUpdateOne) SetCourseID(id int) *CourseSectionUpdateOne {
	_u.mutation.SetCourseID(id)
	return _u
}

// SetCourse sets the "course" edge to the Course entity.
func (_u *CourseSectionUpdateOne) SetCourse(v *Course) *CourseSectionUpdateOne {
	return _u.SetCourseID(v.ID)
}

// AddProfessorIDs adds the "professors" edge to the User entity by IDs.
func (_u *CourseSectionUpdateOne) AddProfessorIDs(ids ...int) *CourseSectionUpdateOne {
	_u.mutation.AddProfessorIDs(ids...)
	return _u
}

// AddProfessors adds the "professors" edges to the User entity.
func (_u *CourseSectionUpdateOne) AddProfessors(v ...*User) *CourseSectionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProfessorIDs(ids...)
}

// AddTeachingAssistantIDs adds the "teaching_assistants" edge to the User entity by IDs.
func (_u *CourseSectionUpdateOne) AddTeachingAssistantIDs(ids ...int) *CourseSectionUpdateOne {
	_u.mutation.AddTeachingAssistantIDs(ids...)
	return _u
}

// AddTeachingAssistants adds the "teaching_assistants" edges to the User entity.
func (_u *CourseSectionUpdateOne) AddTeachingAssistants(v ...*User) *CourseSectionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTeachingAssistantIDs(ids...)
}

// AddStudentIDs adds the "students" edge to the User entity by IDs.
func (_u *CourseSectionUpdateOne) AddStudentIDs(ids ...int) *CourseSectionUpdateOne {
	_u.mutation.AddStudentIDs(ids...)
	return _u
}

// AddStudents adds the "students" edges to the User entity.
func (_u *CourseSectionUpdateOne) AddStudents(v ...*User) *CourseSectionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStudentIDs(ids...)
}

// Mutation returns the CourseSectionMutation object of the builder.
func (_u *CourseSectionUpdateOne) Mutation() *CourseSectionMutation {
	return _u.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (_u *CourseSectionUpdateOne) ClearCourse() *CourseSectionUpdateOne {
	_u.mutation.ClearCourse()
	return _u
}

// ClearProfessors clears all "professors" edges to the User entity.
func (_u *CourseSectionUpdateOne) ClearProfessors() *CourseSectionUpdateOne {
	_u.mutation.ClearProfessors()
	return _u
}

// RemoveProfessorIDs removes the "professors" edge to User entities by IDs.
func (_u *CourseSectionUpdateOne) RemoveProfessorIDs(ids ...int) *CourseSectionUpdateOne {
	_u.mutation.RemoveProfessorIDs(ids...)
	return _u
}

// RemoveProfessors removes "professors" edges to User entities.
func (_u *CourseSectionUpdateOne) RemoveProfessors(v ...*User) *CourseSectionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProfessorIDs(ids...)
}

// ClearTeachingAssistants clears all "teaching_assistants" edges to the User entity.
func (_u *CourseSectionUpdateOne) ClearTeachingAssistants() *CourseSectionUpdateOne {
	_u.mutation.ClearTeachingAssistants()
	return _u
}

// RemoveTeachingAssistantIDs removes the "teaching_assistants" edge to User entities by IDs.
func (_u *CourseSectionUpdateOne) RemoveTeachingAssistantIDs(ids ...int) *CourseSectionUpdateOne {
	_u.mutation.RemoveTeachingAssistantIDs(ids...)
	return _u
}

// RemoveTeachingAssistants removes "teaching_assistants" edges to User entities.
func (_u *CourseSectionUpdateOne) RemoveTeachingAssistants(v ...*User) *CourseSectionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTeachingAssistantIDs(ids...)
}

// ClearStudents clears all "students" edges to the User entity.
func (_u *CourseSectionUpdateOne) ClearStudents() *CourseSectionUpdateOne {
	_u.mutation.ClearStudents()
	return _u
}

// RemoveStudentIDs removes the "students" edge to User entities by IDs.
func (_u *CourseSectionUpdateOne) RemoveStudentIDs(ids ...int) *CourseSectionUpdateOne {
	_u.mutation.RemoveStudentIDs(ids...)
	return _u
}

// RemoveStudents removes "students" edges to User entities.
func (_u *CourseSectionUpdateOne) RemoveStudents(v ...*User) *CourseSectionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStudentIDs(ids...)
}

// Where appends a list predicates to the CourseSectionUpdate builder.
func (_u *CourseSectionUpdateOne) Where(ps ...predicate.CourseSection) *CourseSectionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CourseSectionUpdateOne) Select(field string, fields ...string) *CourseSectionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated CourseSection entity.
func (_u *CourseSectionUpdateOne) Save(ctx context.Context) (*CourseSection, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CourseSectionUpdateOne) SaveX(ctx context.Context) *CourseSection {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CourseSectionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CourseSectionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CourseSectionUpdateOne) check() error {
	if _u.mutation.CourseCleared() && len(_u.mutation.CourseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CourseSection.course"`)
	}
	return nil
}

func (_u *CourseSectionUpdateOne) sqlSave(ctx context.Context) (_node *CourseSection, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(coursesection.Table, coursesection.Columns, sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CourseSection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coursesection.FieldID)
		for _, f := range fields {
			if !coursesection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coursesection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Number(); ok {
		_spec.SetField(coursesection.FieldNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedNumber(); ok {
		_spec.AddField(coursesection.FieldNumber, field.TypeInt, value)
	}
	if _u.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesection.CourseTable,
			Columns: []string{coursesection.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coursesection.CourseTable,
			Columns: []string{coursesection.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProfessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.ProfessorsTable,
			Columns: coursesection.ProfessorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProfessorsIDs(); len(nodes) > 0 && !_u.mutation.ProfessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.ProfessorsTable,
			Columns: coursesection.ProfessorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfessorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.ProfessorsTable,
			Columns: coursesection.ProfessorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeachingAssistantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.TeachingAssistantsTable,
			Columns: coursesection.TeachingAssistantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTeachingAssistantsIDs(); len(nodes) > 0 && !_u.mutation.TeachingAssistantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.TeachingAssistantsTable,
			Columns: coursesection.TeachingAssistantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeachingAssistantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.TeachingAssistantsTable,
			Columns: coursesection.TeachingAssistantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.StudentsTable,
			Columns: coursesection.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !_u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.StudentsTable,
			Columns: coursesection.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   coursesection.StudentsTable,
			Columns: coursesection.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CourseSection{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coursesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
