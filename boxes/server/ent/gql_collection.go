// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/course"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/coursesection"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/discussionboard"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/post"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/reply"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/user"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *CourseQuery) CollectFields(ctx context.Context, satisfies ...string) (*CourseQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *CourseQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(course.Columns))
		selectedFields = []string{course.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "discussionBoard":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DiscussionBoardClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, discussionboardImplementors)...); err != nil {
				return err
			}
			_q.withDiscussionBoard = query

		case "sections":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CourseSectionClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, coursesectionImplementors)...); err != nil {
				return err
			}
			_q.WithNamedSections(alias, func(wq *CourseSectionQuery) {
				*wq = *query
			})
		case "code":
			if _, ok := fieldSeen[course.FieldCode]; !ok {
				selectedFields = append(selectedFields, course.FieldCode)
				fieldSeen[course.FieldCode] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type coursePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CoursePaginateOption
}

func newCoursePaginateArgs(rv map[string]any) *coursePaginateArgs {
	args := &coursePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *CourseSectionQuery) CollectFields(ctx context.Context, satisfies ...string) (*CourseSectionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *CourseSectionQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(coursesection.Columns))
		selectedFields = []string{coursesection.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "course":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CourseClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, courseImplementors)...); err != nil {
				return err
			}
			_q.withCourse = query

		case "professors":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			_q.WithNamedProfessors(alias, func(wq *UserQuery) {
				*wq = *query
			})

		case "teachingAssistants":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			_q.WithNamedTeachingAssistants(alias, func(wq *UserQuery) {
				*wq = *query
			})

		case "courseAssistants":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			_q.WithNamedCourseAssistants(alias, func(wq *UserQuery) {
				*wq = *query
			})

		case "students":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			_q.WithNamedStudents(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "number":
			if _, ok := fieldSeen[coursesection.FieldNumber]; !ok {
				selectedFields = append(selectedFields, coursesection.FieldNumber)
				fieldSeen[coursesection.FieldNumber] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type coursesectionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CourseSectionPaginateOption
}

func newCourseSectionPaginateArgs(rv map[string]any) *coursesectionPaginateArgs {
	args := &coursesectionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *DiscussionBoardQuery) CollectFields(ctx context.Context, satisfies ...string) (*DiscussionBoardQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *DiscussionBoardQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(discussionboard.Columns))
		selectedFields = []string{discussionboard.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "posts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, postImplementors)...); err != nil {
				return err
			}
			_q.WithNamedPosts(alias, func(wq *PostQuery) {
				*wq = *query
			})

		case "course":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CourseClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, courseImplementors)...); err != nil {
				return err
			}
			_q.withCourse = query
		case "name":
			if _, ok := fieldSeen[discussionboard.FieldName]; !ok {
				selectedFields = append(selectedFields, discussionboard.FieldName)
				fieldSeen[discussionboard.FieldName] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type discussionboardPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DiscussionBoardPaginateOption
}

func newDiscussionBoardPaginateArgs(rv map[string]any) *discussionboardPaginateArgs {
	args := &discussionboardPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *PostQuery) CollectFields(ctx context.Context, satisfies ...string) (*PostQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *PostQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(post.Columns))
		selectedFields = []string{post.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "author":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			_q.withAuthor = query

		case "board":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DiscussionBoardClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, discussionboardImplementors)...); err != nil {
				return err
			}
			_q.withBoard = query

		case "replies":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ReplyClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, replyImplementors)...); err != nil {
				return err
			}
			_q.WithNamedReplies(alias, func(wq *ReplyQuery) {
				*wq = *query
			})
		case "title":
			if _, ok := fieldSeen[post.FieldTitle]; !ok {
				selectedFields = append(selectedFields, post.FieldTitle)
				fieldSeen[post.FieldTitle] = struct{}{}
			}
		case "content":
			if _, ok := fieldSeen[post.FieldContent]; !ok {
				selectedFields = append(selectedFields, post.FieldContent)
				fieldSeen[post.FieldContent] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type postPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PostPaginateOption
}

func newPostPaginateArgs(rv map[string]any) *postPaginateArgs {
	args := &postPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *ReplyQuery) CollectFields(ctx context.Context, satisfies ...string) (*ReplyQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *ReplyQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(reply.Columns))
		selectedFields = []string{reply.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "author":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			_q.withAuthor = query

		case "post":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, postImplementors)...); err != nil {
				return err
			}
			_q.withPost = query
		case "content":
			if _, ok := fieldSeen[reply.FieldContent]; !ok {
				selectedFields = append(selectedFields, reply.FieldContent)
				fieldSeen[reply.FieldContent] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type replyPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ReplyPaginateOption
}

func newReplyPaginateArgs(rv map[string]any) *replyPaginateArgs {
	args := &replyPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_q *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _q, nil
	}
	if err := _q.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return _q, nil
}

func (_q *UserQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "posts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, postImplementors)...); err != nil {
				return err
			}
			_q.WithNamedPosts(alias, func(wq *PostQuery) {
				*wq = *query
			})

		case "replies":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ReplyClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, replyImplementors)...); err != nil {
				return err
			}
			_q.WithNamedReplies(alias, func(wq *ReplyQuery) {
				*wq = *query
			})

		case "teachingSections":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CourseSectionClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, coursesectionImplementors)...); err != nil {
				return err
			}
			_q.WithNamedTeachingSections(alias, func(wq *CourseSectionQuery) {
				*wq = *query
			})

		case "teachingAssistantSections":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CourseSectionClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, coursesectionImplementors)...); err != nil {
				return err
			}
			_q.WithNamedTeachingAssistantSections(alias, func(wq *CourseSectionQuery) {
				*wq = *query
			})

		case "courseAssistantSections":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CourseSectionClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, coursesectionImplementors)...); err != nil {
				return err
			}
			_q.WithNamedCourseAssistantSections(alias, func(wq *CourseSectionQuery) {
				*wq = *query
			})

		case "enrolledSections":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CourseSectionClient{config: _q.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, coursesectionImplementors)...); err != nil {
				return err
			}
			_q.WithNamedEnrolledSections(alias, func(wq *CourseSectionQuery) {
				*wq = *query
			})
		case "firstName":
			if _, ok := fieldSeen[user.FieldFirstName]; !ok {
				selectedFields = append(selectedFields, user.FieldFirstName)
				fieldSeen[user.FieldFirstName] = struct{}{}
			}
		case "middleName":
			if _, ok := fieldSeen[user.FieldMiddleName]; !ok {
				selectedFields = append(selectedFields, user.FieldMiddleName)
				fieldSeen[user.FieldMiddleName] = struct{}{}
			}
		case "lastName":
			if _, ok := fieldSeen[user.FieldLastName]; !ok {
				selectedFields = append(selectedFields, user.FieldLastName)
				fieldSeen[user.FieldLastName] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[user.FieldEmail]; !ok {
				selectedFields = append(selectedFields, user.FieldEmail)
				fieldSeen[user.FieldEmail] = struct{}{}
			}
		case "password":
			if _, ok := fieldSeen[user.FieldPassword]; !ok {
				selectedFields = append(selectedFields, user.FieldPassword)
				fieldSeen[user.FieldPassword] = struct{}{}
			}
		case "role":
			if _, ok := fieldSeen[user.FieldRole]; !ok {
				selectedFields = append(selectedFields, user.FieldRole)
				fieldSeen[user.FieldRole] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		_q.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]any) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok || v == nil {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
