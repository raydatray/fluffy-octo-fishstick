// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/course"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/coursesection"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/discussionboard"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/predicate"
)

// CourseUpdate is the builder for updating Course entities.
type CourseUpdate struct {
	config
	hooks    []Hook
	mutation *CourseMutation
}

// Where appends a list predicates to the CourseUpdate builder.
func (_u *CourseUpdate) Where(ps ...predicate.Course) *CourseUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCode sets the "code" field.
func (_u *CourseUpdate) SetCode(v string) *CourseUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *CourseUpdate) SetNillableCode(v *string) *CourseUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetDiscussionBoardID sets the "discussion_board" edge to the DiscussionBoard entity by ID.
func (_u *CourseUpdate) SetDiscussionBoardID(id int) *CourseUpdate {
	_u.mutation.SetDiscussionBoardID(id)
	return _u
}

// SetNillableDiscussionBoardID sets the "discussion_board" edge to the DiscussionBoard entity by ID if the given value is not nil.
func (_u *CourseUpdate) SetNillableDiscussionBoardID(id *int) *CourseUpdate {
	if id != nil {
		_u = _u.SetDiscussionBoardID(*id)
	}
	return _u
}

// SetDiscussionBoard sets the "discussion_board" edge to the DiscussionBoard entity.
func (_u *CourseUpdate) SetDiscussionBoard(v *DiscussionBoard) *CourseUpdate {
	return _u.SetDiscussionBoardID(v.ID)
}

// AddSectionIDs adds the "sections" edge to the CourseSection entity by IDs.
func (_u *CourseUpdate) AddSectionIDs(ids ...int) *CourseUpdate {
	_u.mutation.AddSectionIDs(ids...)
	return _u
}

// AddSections adds the "sections" edges to the CourseSection entity.
func (_u *CourseUpdate) AddSections(v ...*CourseSection) *CourseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSectionIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (_u *CourseUpdate) Mutation() *CourseMutation {
	return _u.mutation
}

// ClearDiscussionBoard clears the "discussion_board" edge to the DiscussionBoard entity.
func (_u *CourseUpdate) ClearDiscussionBoard() *CourseUpdate {
	_u.mutation.ClearDiscussionBoard()
	return _u
}

// ClearSections clears all "sections" edges to the CourseSection entity.
func (_u *CourseUpdate) ClearSections() *CourseUpdate {
	_u.mutation.ClearSections()
	return _u
}

// RemoveSectionIDs removes the "sections" edge to CourseSection entities by IDs.
func (_u *CourseUpdate) RemoveSectionIDs(ids ...int) *CourseUpdate {
	_u.mutation.RemoveSectionIDs(ids...)
	return _u
}

// RemoveSections removes "sections" edges to CourseSection entities.
func (_u *CourseUpdate) RemoveSections(v ...*CourseSection) *CourseUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CourseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CourseUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CourseUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CourseUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *CourseUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(course.FieldCode, field.TypeString, value)
	}
	if _u.mutation.DiscussionBoardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   course.DiscussionBoardTable,
			Columns: []string{course.DiscussionBoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discussionboard.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DiscussionBoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   course.DiscussionBoardTable,
			Columns: []string{course.DiscussionBoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discussionboard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SectionsTable,
			Columns: []string{course.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSectionsIDs(); len(nodes) > 0 && !_u.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SectionsTable,
			Columns: []string{course.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SectionsTable,
			Columns: []string{course.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CourseUpdateOne is the builder for updating a single Course entity.
type CourseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseMutation
}

// SetCode sets the "code" field.
func (_u *CourseUpdateOne) SetCode(v string) *CourseUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *CourseUpdateOne) SetNillableCode(v *string) *CourseUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetDiscussionBoardID sets the "discussion_board" edge to the DiscussionBoard entity by ID.
func (_u *CourseUpdateOne) SetDiscussionBoardID(id int) *CourseUpdateOne {
	_u.mutation.SetDiscussionBoardID(id)
	return _u
}

// SetNillableDiscussionBoardID sets the "discussion_board" edge to the DiscussionBoard entity by ID if the given value is not nil.
func (_u *CourseUpdateOne) SetNillableDiscussionBoardID(id *int) *CourseUpdateOne {
	if id != nil {
		_u = _u.SetDiscussionBoardID(*id)
	}
	return _u
}

// SetDiscussionBoard sets the "discussion_board" edge to the DiscussionBoard entity.
func (_u *CourseUpdateOne) SetDiscussionBoard(v *DiscussionBoard) *CourseUpdateOne {
	return _u.SetDiscussionBoardID(v.ID)
}

// AddSectionIDs adds the "sections" edge to the CourseSection entity by IDs.
func (_u *CourseUpdateOne) AddSectionIDs(ids ...int) *CourseUpdateOne {
	_u.mutation.AddSectionIDs(ids...)
	return _u
}

// AddSections adds the "sections" edges to the CourseSection entity.
func (_u *CourseUpdateOne) AddSections(v ...*CourseSection) *CourseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSectionIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (_u *CourseUpdateOne) Mutation() *CourseMutation {
	return _u.mutation
}

// ClearDiscussionBoard clears the "discussion_board" edge to the DiscussionBoard entity.
func (_u *CourseUpdateOne) ClearDiscussionBoard() *CourseUpdateOne {
	_u.mutation.ClearDiscussionBoard()
	return _u
}

// ClearSections clears all "sections" edges to the CourseSection entity.
func (_u *CourseUpdateOne) ClearSections() *CourseUpdateOne {
	_u.mutation.ClearSections()
	return _u
}

// RemoveSectionIDs removes the "sections" edge to CourseSection entities by IDs.
func (_u *CourseUpdateOne) RemoveSectionIDs(ids ...int) *CourseUpdateOne {
	_u.mutation.RemoveSectionIDs(ids...)
	return _u
}

// RemoveSections removes "sections" edges to CourseSection entities.
func (_u *CourseUpdateOne) RemoveSections(v ...*CourseSection) *CourseUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSectionIDs(ids...)
}

// Where appends a list predicates to the CourseUpdate builder.
func (_u *CourseUpdateOne) Where(ps ...predicate.Course) *CourseUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CourseUpdateOne) Select(field string, fields ...string) *CourseUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Course entity.
func (_u *CourseUpdateOne) Save(ctx context.Context) (*Course, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CourseUpdateOne) SaveX(ctx context.Context) *Course {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CourseUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CourseUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *CourseUpdateOne) sqlSave(ctx context.Context) (_node *Course, err error) {
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Course.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, course.FieldID)
		for _, f := range fields {
			if !course.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != course.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(course.FieldCode, field.TypeString, value)
	}
	if _u.mutation.DiscussionBoardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   course.DiscussionBoardTable,
			Columns: []string{course.DiscussionBoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discussionboard.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DiscussionBoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   course.DiscussionBoardTable,
			Columns: []string{course.DiscussionBoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discussionboard.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SectionsTable,
			Columns: []string{course.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSectionsIDs(); len(nodes) > 0 && !_u.mutation.SectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SectionsTable,
			Columns: []string{course.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.SectionsTable,
			Columns: []string{course.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Course{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
