// Code generated by ent, DO NOT EDIT.

package coursesection

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldLTE(FieldID, id))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldEQ(FieldNumber, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int) predicate.CourseSection {
	return predicate.CourseSection(sql.FieldLTE(FieldNumber, v))
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.CourseSection {
	return predicate.CourseSection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.Course) predicate.CourseSection {
	return predicate.CourseSection(func(s *sql.Selector) {
		step := newCourseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfessors applies the HasEdge predicate on the "professors" edge.
func HasProfessors() predicate.CourseSection {
	return predicate.CourseSection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProfessorsTable, ProfessorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfessorsWith applies the HasEdge predicate on the "professors" edge with a given conditions (other predicates).
func HasProfessorsWith(preds ...predicate.User) predicate.CourseSection {
	return predicate.CourseSection(func(s *sql.Selector) {
		step := newProfessorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeachingAssistants applies the HasEdge predicate on the "teaching_assistants" edge.
func HasTeachingAssistants() predicate.CourseSection {
	return predicate.CourseSection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TeachingAssistantsTable, TeachingAssistantsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeachingAssistantsWith applies the HasEdge predicate on the "teaching_assistants" edge with a given conditions (other predicates).
func HasTeachingAssistantsWith(preds ...predicate.User) predicate.CourseSection {
	return predicate.CourseSection(func(s *sql.Selector) {
		step := newTeachingAssistantsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStudents applies the HasEdge predicate on the "students" edge.
func HasStudents() predicate.CourseSection {
	return predicate.CourseSection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, StudentsTable, StudentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentsWith applies the HasEdge predicate on the "students" edge with a given conditions (other predicates).
func HasStudentsWith(preds ...predicate.User) predicate.CourseSection {
	return predicate.CourseSection(func(s *sql.Selector) {
		step := newStudentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CourseSection) predicate.CourseSection {
	return predicate.CourseSection(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CourseSection) predicate.CourseSection {
	return predicate.CourseSection(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CourseSection) predicate.CourseSection {
	return predicate.CourseSection(sql.NotPredicates(p))
}
