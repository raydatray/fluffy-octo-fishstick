// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/course"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/coursesection"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/discussionboard"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/post"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/predicate"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/reply"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCourse          = "Course"
	TypeCourseSection   = "CourseSection"
	TypeDiscussionBoard = "DiscussionBoard"
	TypePost            = "Post"
	TypeReply           = "Reply"
	TypeUser            = "User"
)

// CourseMutation represents an operation that mutates the Course nodes in the graph.
type CourseMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	code                    *string
	clearedFields           map[string]struct{}
	discussion_board        *int
	cleareddiscussion_board bool
	sections                map[int]struct{}
	removedsections         map[int]struct{}
	clearedsections         bool
	done                    bool
	oldValue                func(context.Context) (*Course, error)
	predicates              []predicate.Course
}

var _ ent.Mutation = (*CourseMutation)(nil)

// courseOption allows management of the mutation configuration using functional options.
type courseOption func(*CourseMutation)

// newCourseMutation creates new mutation for the Course entity.
func newCourseMutation(c config, op Op, opts ...courseOption) *CourseMutation {
	m := &CourseMutation{
		config:        c,
		op:            op,
		typ:           TypeCourse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCourseID sets the ID field of the mutation.
func withCourseID(id int) courseOption {
	return func(m *CourseMutation) {
		var (
			err   error
			once  sync.Once
			value *Course
		)
		m.oldValue = func(ctx context.Context) (*Course, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Course.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCourse sets the old Course of the mutation.
func withCourse(node *Course) courseOption {
	return func(m *CourseMutation) {
		m.oldValue = func(context.Context) (*Course, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CourseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CourseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CourseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CourseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Course.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *CourseMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *CourseMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Course entity.
// If the Course object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *CourseMutation) ResetCode() {
	m.code = nil
}

// SetDiscussionBoardID sets the "discussion_board" edge to the DiscussionBoard entity by id.
func (m *CourseMutation) SetDiscussionBoardID(id int) {
	m.discussion_board = &id
}

// ClearDiscussionBoard clears the "discussion_board" edge to the DiscussionBoard entity.
func (m *CourseMutation) ClearDiscussionBoard() {
	m.cleareddiscussion_board = true
}

// DiscussionBoardCleared reports if the "discussion_board" edge to the DiscussionBoard entity was cleared.
func (m *CourseMutation) DiscussionBoardCleared() bool {
	return m.cleareddiscussion_board
}

// DiscussionBoardID returns the "discussion_board" edge ID in the mutation.
func (m *CourseMutation) DiscussionBoardID() (id int, exists bool) {
	if m.discussion_board != nil {
		return *m.discussion_board, true
	}
	return
}

// DiscussionBoardIDs returns the "discussion_board" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DiscussionBoardID instead. It exists only for internal usage by the builders.
func (m *CourseMutation) DiscussionBoardIDs() (ids []int) {
	if id := m.discussion_board; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDiscussionBoard resets all changes to the "discussion_board" edge.
func (m *CourseMutation) ResetDiscussionBoard() {
	m.discussion_board = nil
	m.cleareddiscussion_board = false
}

// AddSectionIDs adds the "sections" edge to the CourseSection entity by ids.
func (m *CourseMutation) AddSectionIDs(ids ...int) {
	if m.sections == nil {
		m.sections = make(map[int]struct{})
	}
	for i := range ids {
		m.sections[ids[i]] = struct{}{}
	}
}

// ClearSections clears the "sections" edge to the CourseSection entity.
func (m *CourseMutation) ClearSections() {
	m.clearedsections = true
}

// SectionsCleared reports if the "sections" edge to the CourseSection entity was cleared.
func (m *CourseMutation) SectionsCleared() bool {
	return m.clearedsections
}

// RemoveSectionIDs removes the "sections" edge to the CourseSection entity by IDs.
func (m *CourseMutation) RemoveSectionIDs(ids ...int) {
	if m.removedsections == nil {
		m.removedsections = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sections, ids[i])
		m.removedsections[ids[i]] = struct{}{}
	}
}

// RemovedSections returns the removed IDs of the "sections" edge to the CourseSection entity.
func (m *CourseMutation) RemovedSectionsIDs() (ids []int) {
	for id := range m.removedsections {
		ids = append(ids, id)
	}
	return
}

// SectionsIDs returns the "sections" edge IDs in the mutation.
func (m *CourseMutation) SectionsIDs() (ids []int) {
	for id := range m.sections {
		ids = append(ids, id)
	}
	return
}

// ResetSections resets all changes to the "sections" edge.
func (m *CourseMutation) ResetSections() {
	m.sections = nil
	m.clearedsections = false
	m.removedsections = nil
}

// Where appends a list predicates to the CourseMutation builder.
func (m *CourseMutation) Where(ps ...predicate.Course) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CourseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CourseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Course, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CourseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CourseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Course).
func (m *CourseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CourseMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.code != nil {
		fields = append(fields, course.FieldCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CourseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case course.FieldCode:
		return m.Code()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CourseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case course.FieldCode:
		return m.OldCode(ctx)
	}
	return nil, fmt.Errorf("unknown Course field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case course.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	}
	return fmt.Errorf("unknown Course field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CourseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CourseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Course numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CourseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CourseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CourseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Course nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CourseMutation) ResetField(name string) error {
	switch name {
	case course.FieldCode:
		m.ResetCode()
		return nil
	}
	return fmt.Errorf("unknown Course field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CourseMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.discussion_board != nil {
		edges = append(edges, course.EdgeDiscussionBoard)
	}
	if m.sections != nil {
		edges = append(edges, course.EdgeSections)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CourseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case course.EdgeDiscussionBoard:
		if id := m.discussion_board; id != nil {
			return []ent.Value{*id}
		}
	case course.EdgeSections:
		ids := make([]ent.Value, 0, len(m.sections))
		for id := range m.sections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CourseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsections != nil {
		edges = append(edges, course.EdgeSections)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CourseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case course.EdgeSections:
		ids := make([]ent.Value, 0, len(m.removedsections))
		for id := range m.removedsections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CourseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddiscussion_board {
		edges = append(edges, course.EdgeDiscussionBoard)
	}
	if m.clearedsections {
		edges = append(edges, course.EdgeSections)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CourseMutation) EdgeCleared(name string) bool {
	switch name {
	case course.EdgeDiscussionBoard:
		return m.cleareddiscussion_board
	case course.EdgeSections:
		return m.clearedsections
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CourseMutation) ClearEdge(name string) error {
	switch name {
	case course.EdgeDiscussionBoard:
		m.ClearDiscussionBoard()
		return nil
	}
	return fmt.Errorf("unknown Course unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CourseMutation) ResetEdge(name string) error {
	switch name {
	case course.EdgeDiscussionBoard:
		m.ResetDiscussionBoard()
		return nil
	case course.EdgeSections:
		m.ResetSections()
		return nil
	}
	return fmt.Errorf("unknown Course edge %s", name)
}

// CourseSectionMutation represents an operation that mutates the CourseSection nodes in the graph.
type CourseSectionMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	number                     *int
	addnumber                  *int
	clearedFields              map[string]struct{}
	course                     *int
	clearedcourse              bool
	professors                 map[int]struct{}
	removedprofessors          map[int]struct{}
	clearedprofessors          bool
	teaching_assistants        map[int]struct{}
	removedteaching_assistants map[int]struct{}
	clearedteaching_assistants bool
	course_assistants          map[int]struct{}
	removedcourse_assistants   map[int]struct{}
	clearedcourse_assistants   bool
	students                   map[int]struct{}
	removedstudents            map[int]struct{}
	clearedstudents            bool
	done                       bool
	oldValue                   func(context.Context) (*CourseSection, error)
	predicates                 []predicate.CourseSection
}

var _ ent.Mutation = (*CourseSectionMutation)(nil)

// coursesectionOption allows management of the mutation configuration using functional options.
type coursesectionOption func(*CourseSectionMutation)

// newCourseSectionMutation creates new mutation for the CourseSection entity.
func newCourseSectionMutation(c config, op Op, opts ...coursesectionOption) *CourseSectionMutation {
	m := &CourseSectionMutation{
		config:        c,
		op:            op,
		typ:           TypeCourseSection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCourseSectionID sets the ID field of the mutation.
func withCourseSectionID(id int) coursesectionOption {
	return func(m *CourseSectionMutation) {
		var (
			err   error
			once  sync.Once
			value *CourseSection
		)
		m.oldValue = func(ctx context.Context) (*CourseSection, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CourseSection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCourseSection sets the old CourseSection of the mutation.
func withCourseSection(node *CourseSection) coursesectionOption {
	return func(m *CourseSectionMutation) {
		m.oldValue = func(context.Context) (*CourseSection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CourseSectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CourseSectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CourseSectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CourseSectionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CourseSection.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNumber sets the "number" field.
func (m *CourseSectionMutation) SetNumber(i int) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *CourseSectionMutation) Number() (r int, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the CourseSection entity.
// If the CourseSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CourseSectionMutation) OldNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *CourseSectionMutation) AddNumber(i int) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *CourseSectionMutation) AddedNumber() (r int, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *CourseSectionMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetCourseID sets the "course" edge to the Course entity by id.
func (m *CourseSectionMutation) SetCourseID(id int) {
	m.course = &id
}

// ClearCourse clears the "course" edge to the Course entity.
func (m *CourseSectionMutation) ClearCourse() {
	m.clearedcourse = true
}

// CourseCleared reports if the "course" edge to the Course entity was cleared.
func (m *CourseSectionMutation) CourseCleared() bool {
	return m.clearedcourse
}

// CourseID returns the "course" edge ID in the mutation.
func (m *CourseSectionMutation) CourseID() (id int, exists bool) {
	if m.course != nil {
		return *m.course, true
	}
	return
}

// CourseIDs returns the "course" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CourseID instead. It exists only for internal usage by the builders.
func (m *CourseSectionMutation) CourseIDs() (ids []int) {
	if id := m.course; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCourse resets all changes to the "course" edge.
func (m *CourseSectionMutation) ResetCourse() {
	m.course = nil
	m.clearedcourse = false
}

// AddProfessorIDs adds the "professors" edge to the User entity by ids.
func (m *CourseSectionMutation) AddProfessorIDs(ids ...int) {
	if m.professors == nil {
		m.professors = make(map[int]struct{})
	}
	for i := range ids {
		m.professors[ids[i]] = struct{}{}
	}
}

// ClearProfessors clears the "professors" edge to the User entity.
func (m *CourseSectionMutation) ClearProfessors() {
	m.clearedprofessors = true
}

// ProfessorsCleared reports if the "professors" edge to the User entity was cleared.
func (m *CourseSectionMutation) ProfessorsCleared() bool {
	return m.clearedprofessors
}

// RemoveProfessorIDs removes the "professors" edge to the User entity by IDs.
func (m *CourseSectionMutation) RemoveProfessorIDs(ids ...int) {
	if m.removedprofessors == nil {
		m.removedprofessors = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.professors, ids[i])
		m.removedprofessors[ids[i]] = struct{}{}
	}
}

// RemovedProfessors returns the removed IDs of the "professors" edge to the User entity.
func (m *CourseSectionMutation) RemovedProfessorsIDs() (ids []int) {
	for id := range m.removedprofessors {
		ids = append(ids, id)
	}
	return
}

// ProfessorsIDs returns the "professors" edge IDs in the mutation.
func (m *CourseSectionMutation) ProfessorsIDs() (ids []int) {
	for id := range m.professors {
		ids = append(ids, id)
	}
	return
}

// ResetProfessors resets all changes to the "professors" edge.
func (m *CourseSectionMutation) ResetProfessors() {
	m.professors = nil
	m.clearedprofessors = false
	m.removedprofessors = nil
}

// AddTeachingAssistantIDs adds the "teaching_assistants" edge to the User entity by ids.
func (m *CourseSectionMutation) AddTeachingAssistantIDs(ids ...int) {
	if m.teaching_assistants == nil {
		m.teaching_assistants = make(map[int]struct{})
	}
	for i := range ids {
		m.teaching_assistants[ids[i]] = struct{}{}
	}
}

// ClearTeachingAssistants clears the "teaching_assistants" edge to the User entity.
func (m *CourseSectionMutation) ClearTeachingAssistants() {
	m.clearedteaching_assistants = true
}

// TeachingAssistantsCleared reports if the "teaching_assistants" edge to the User entity was cleared.
func (m *CourseSectionMutation) TeachingAssistantsCleared() bool {
	return m.clearedteaching_assistants
}

// RemoveTeachingAssistantIDs removes the "teaching_assistants" edge to the User entity by IDs.
func (m *CourseSectionMutation) RemoveTeachingAssistantIDs(ids ...int) {
	if m.removedteaching_assistants == nil {
		m.removedteaching_assistants = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.teaching_assistants, ids[i])
		m.removedteaching_assistants[ids[i]] = struct{}{}
	}
}

// RemovedTeachingAssistants returns the removed IDs of the "teaching_assistants" edge to the User entity.
func (m *CourseSectionMutation) RemovedTeachingAssistantsIDs() (ids []int) {
	for id := range m.removedteaching_assistants {
		ids = append(ids, id)
	}
	return
}

// TeachingAssistantsIDs returns the "teaching_assistants" edge IDs in the mutation.
func (m *CourseSectionMutation) TeachingAssistantsIDs() (ids []int) {
	for id := range m.teaching_assistants {
		ids = append(ids, id)
	}
	return
}

// ResetTeachingAssistants resets all changes to the "teaching_assistants" edge.
func (m *CourseSectionMutation) ResetTeachingAssistants() {
	m.teaching_assistants = nil
	m.clearedteaching_assistants = false
	m.removedteaching_assistants = nil
}

// AddCourseAssistantIDs adds the "course_assistants" edge to the User entity by ids.
func (m *CourseSectionMutation) AddCourseAssistantIDs(ids ...int) {
	if m.course_assistants == nil {
		m.course_assistants = make(map[int]struct{})
	}
	for i := range ids {
		m.course_assistants[ids[i]] = struct{}{}
	}
}

// ClearCourseAssistants clears the "course_assistants" edge to the User entity.
func (m *CourseSectionMutation) ClearCourseAssistants() {
	m.clearedcourse_assistants = true
}

// CourseAssistantsCleared reports if the "course_assistants" edge to the User entity was cleared.
func (m *CourseSectionMutation) CourseAssistantsCleared() bool {
	return m.clearedcourse_assistants
}

// RemoveCourseAssistantIDs removes the "course_assistants" edge to the User entity by IDs.
func (m *CourseSectionMutation) RemoveCourseAssistantIDs(ids ...int) {
	if m.removedcourse_assistants == nil {
		m.removedcourse_assistants = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.course_assistants, ids[i])
		m.removedcourse_assistants[ids[i]] = struct{}{}
	}
}

// RemovedCourseAssistants returns the removed IDs of the "course_assistants" edge to the User entity.
func (m *CourseSectionMutation) RemovedCourseAssistantsIDs() (ids []int) {
	for id := range m.removedcourse_assistants {
		ids = append(ids, id)
	}
	return
}

// CourseAssistantsIDs returns the "course_assistants" edge IDs in the mutation.
func (m *CourseSectionMutation) CourseAssistantsIDs() (ids []int) {
	for id := range m.course_assistants {
		ids = append(ids, id)
	}
	return
}

// ResetCourseAssistants resets all changes to the "course_assistants" edge.
func (m *CourseSectionMutation) ResetCourseAssistants() {
	m.course_assistants = nil
	m.clearedcourse_assistants = false
	m.removedcourse_assistants = nil
}

// AddStudentIDs adds the "students" edge to the User entity by ids.
func (m *CourseSectionMutation) AddStudentIDs(ids ...int) {
	if m.students == nil {
		m.students = make(map[int]struct{})
	}
	for i := range ids {
		m.students[ids[i]] = struct{}{}
	}
}

// ClearStudents clears the "students" edge to the User entity.
func (m *CourseSectionMutation) ClearStudents() {
	m.clearedstudents = true
}

// StudentsCleared reports if the "students" edge to the User entity was cleared.
func (m *CourseSectionMutation) StudentsCleared() bool {
	return m.clearedstudents
}

// RemoveStudentIDs removes the "students" edge to the User entity by IDs.
func (m *CourseSectionMutation) RemoveStudentIDs(ids ...int) {
	if m.removedstudents == nil {
		m.removedstudents = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.students, ids[i])
		m.removedstudents[ids[i]] = struct{}{}
	}
}

// RemovedStudents returns the removed IDs of the "students" edge to the User entity.
func (m *CourseSectionMutation) RemovedStudentsIDs() (ids []int) {
	for id := range m.removedstudents {
		ids = append(ids, id)
	}
	return
}

// StudentsIDs returns the "students" edge IDs in the mutation.
func (m *CourseSectionMutation) StudentsIDs() (ids []int) {
	for id := range m.students {
		ids = append(ids, id)
	}
	return
}

// ResetStudents resets all changes to the "students" edge.
func (m *CourseSectionMutation) ResetStudents() {
	m.students = nil
	m.clearedstudents = false
	m.removedstudents = nil
}

// Where appends a list predicates to the CourseSectionMutation builder.
func (m *CourseSectionMutation) Where(ps ...predicate.CourseSection) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CourseSectionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CourseSectionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CourseSection, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CourseSectionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CourseSectionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CourseSection).
func (m *CourseSectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CourseSectionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.number != nil {
		fields = append(fields, coursesection.FieldNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CourseSectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coursesection.FieldNumber:
		return m.Number()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CourseSectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coursesection.FieldNumber:
		return m.OldNumber(ctx)
	}
	return nil, fmt.Errorf("unknown CourseSection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseSectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coursesection.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	}
	return fmt.Errorf("unknown CourseSection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CourseSectionMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, coursesection.FieldNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CourseSectionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coursesection.FieldNumber:
		return m.AddedNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CourseSectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coursesection.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	}
	return fmt.Errorf("unknown CourseSection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CourseSectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CourseSectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CourseSectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CourseSection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CourseSectionMutation) ResetField(name string) error {
	switch name {
	case coursesection.FieldNumber:
		m.ResetNumber()
		return nil
	}
	return fmt.Errorf("unknown CourseSection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CourseSectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.course != nil {
		edges = append(edges, coursesection.EdgeCourse)
	}
	if m.professors != nil {
		edges = append(edges, coursesection.EdgeProfessors)
	}
	if m.teaching_assistants != nil {
		edges = append(edges, coursesection.EdgeTeachingAssistants)
	}
	if m.course_assistants != nil {
		edges = append(edges, coursesection.EdgeCourseAssistants)
	}
	if m.students != nil {
		edges = append(edges, coursesection.EdgeStudents)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CourseSectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case coursesection.EdgeCourse:
		if id := m.course; id != nil {
			return []ent.Value{*id}
		}
	case coursesection.EdgeProfessors:
		ids := make([]ent.Value, 0, len(m.professors))
		for id := range m.professors {
			ids = append(ids, id)
		}
		return ids
	case coursesection.EdgeTeachingAssistants:
		ids := make([]ent.Value, 0, len(m.teaching_assistants))
		for id := range m.teaching_assistants {
			ids = append(ids, id)
		}
		return ids
	case coursesection.EdgeCourseAssistants:
		ids := make([]ent.Value, 0, len(m.course_assistants))
		for id := range m.course_assistants {
			ids = append(ids, id)
		}
		return ids
	case coursesection.EdgeStudents:
		ids := make([]ent.Value, 0, len(m.students))
		for id := range m.students {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CourseSectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedprofessors != nil {
		edges = append(edges, coursesection.EdgeProfessors)
	}
	if m.removedteaching_assistants != nil {
		edges = append(edges, coursesection.EdgeTeachingAssistants)
	}
	if m.removedcourse_assistants != nil {
		edges = append(edges, coursesection.EdgeCourseAssistants)
	}
	if m.removedstudents != nil {
		edges = append(edges, coursesection.EdgeStudents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CourseSectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case coursesection.EdgeProfessors:
		ids := make([]ent.Value, 0, len(m.removedprofessors))
		for id := range m.removedprofessors {
			ids = append(ids, id)
		}
		return ids
	case coursesection.EdgeTeachingAssistants:
		ids := make([]ent.Value, 0, len(m.removedteaching_assistants))
		for id := range m.removedteaching_assistants {
			ids = append(ids, id)
		}
		return ids
	case coursesection.EdgeCourseAssistants:
		ids := make([]ent.Value, 0, len(m.removedcourse_assistants))
		for id := range m.removedcourse_assistants {
			ids = append(ids, id)
		}
		return ids
	case coursesection.EdgeStudents:
		ids := make([]ent.Value, 0, len(m.removedstudents))
		for id := range m.removedstudents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CourseSectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedcourse {
		edges = append(edges, coursesection.EdgeCourse)
	}
	if m.clearedprofessors {
		edges = append(edges, coursesection.EdgeProfessors)
	}
	if m.clearedteaching_assistants {
		edges = append(edges, coursesection.EdgeTeachingAssistants)
	}
	if m.clearedcourse_assistants {
		edges = append(edges, coursesection.EdgeCourseAssistants)
	}
	if m.clearedstudents {
		edges = append(edges, coursesection.EdgeStudents)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CourseSectionMutation) EdgeCleared(name string) bool {
	switch name {
	case coursesection.EdgeCourse:
		return m.clearedcourse
	case coursesection.EdgeProfessors:
		return m.clearedprofessors
	case coursesection.EdgeTeachingAssistants:
		return m.clearedteaching_assistants
	case coursesection.EdgeCourseAssistants:
		return m.clearedcourse_assistants
	case coursesection.EdgeStudents:
		return m.clearedstudents
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CourseSectionMutation) ClearEdge(name string) error {
	switch name {
	case coursesection.EdgeCourse:
		m.ClearCourse()
		return nil
	}
	return fmt.Errorf("unknown CourseSection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CourseSectionMutation) ResetEdge(name string) error {
	switch name {
	case coursesection.EdgeCourse:
		m.ResetCourse()
		return nil
	case coursesection.EdgeProfessors:
		m.ResetProfessors()
		return nil
	case coursesection.EdgeTeachingAssistants:
		m.ResetTeachingAssistants()
		return nil
	case coursesection.EdgeCourseAssistants:
		m.ResetCourseAssistants()
		return nil
	case coursesection.EdgeStudents:
		m.ResetStudents()
		return nil
	}
	return fmt.Errorf("unknown CourseSection edge %s", name)
}

// DiscussionBoardMutation represents an operation that mutates the DiscussionBoard nodes in the graph.
type DiscussionBoardMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	posts         map[int]struct{}
	removedposts  map[int]struct{}
	clearedposts  bool
	course        *int
	clearedcourse bool
	done          bool
	oldValue      func(context.Context) (*DiscussionBoard, error)
	predicates    []predicate.DiscussionBoard
}

var _ ent.Mutation = (*DiscussionBoardMutation)(nil)

// discussionboardOption allows management of the mutation configuration using functional options.
type discussionboardOption func(*DiscussionBoardMutation)

// newDiscussionBoardMutation creates new mutation for the DiscussionBoard entity.
func newDiscussionBoardMutation(c config, op Op, opts ...discussionboardOption) *DiscussionBoardMutation {
	m := &DiscussionBoardMutation{
		config:        c,
		op:            op,
		typ:           TypeDiscussionBoard,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiscussionBoardID sets the ID field of the mutation.
func withDiscussionBoardID(id int) discussionboardOption {
	return func(m *DiscussionBoardMutation) {
		var (
			err   error
			once  sync.Once
			value *DiscussionBoard
		)
		m.oldValue = func(ctx context.Context) (*DiscussionBoard, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DiscussionBoard.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiscussionBoard sets the old DiscussionBoard of the mutation.
func withDiscussionBoard(node *DiscussionBoard) discussionboardOption {
	return func(m *DiscussionBoardMutation) {
		m.oldValue = func(context.Context) (*DiscussionBoard, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiscussionBoardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiscussionBoardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DiscussionBoardMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DiscussionBoardMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DiscussionBoard.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DiscussionBoardMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DiscussionBoardMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DiscussionBoard entity.
// If the DiscussionBoard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiscussionBoardMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DiscussionBoardMutation) ResetName() {
	m.name = nil
}

// AddPostIDs adds the "posts" edge to the Post entity by ids.
func (m *DiscussionBoardMutation) AddPostIDs(ids ...int) {
	if m.posts == nil {
		m.posts = make(map[int]struct{})
	}
	for i := range ids {
		m.posts[ids[i]] = struct{}{}
	}
}

// ClearPosts clears the "posts" edge to the Post entity.
func (m *DiscussionBoardMutation) ClearPosts() {
	m.clearedposts = true
}

// PostsCleared reports if the "posts" edge to the Post entity was cleared.
func (m *DiscussionBoardMutation) PostsCleared() bool {
	return m.clearedposts
}

// RemovePostIDs removes the "posts" edge to the Post entity by IDs.
func (m *DiscussionBoardMutation) RemovePostIDs(ids ...int) {
	if m.removedposts == nil {
		m.removedposts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.posts, ids[i])
		m.removedposts[ids[i]] = struct{}{}
	}
}

// RemovedPosts returns the removed IDs of the "posts" edge to the Post entity.
func (m *DiscussionBoardMutation) RemovedPostsIDs() (ids []int) {
	for id := range m.removedposts {
		ids = append(ids, id)
	}
	return
}

// PostsIDs returns the "posts" edge IDs in the mutation.
func (m *DiscussionBoardMutation) PostsIDs() (ids []int) {
	for id := range m.posts {
		ids = append(ids, id)
	}
	return
}

// ResetPosts resets all changes to the "posts" edge.
func (m *DiscussionBoardMutation) ResetPosts() {
	m.posts = nil
	m.clearedposts = false
	m.removedposts = nil
}

// SetCourseID sets the "course" edge to the Course entity by id.
func (m *DiscussionBoardMutation) SetCourseID(id int) {
	m.course = &id
}

// ClearCourse clears the "course" edge to the Course entity.
func (m *DiscussionBoardMutation) ClearCourse() {
	m.clearedcourse = true
}

// CourseCleared reports if the "course" edge to the Course entity was cleared.
func (m *DiscussionBoardMutation) CourseCleared() bool {
	return m.clearedcourse
}

// CourseID returns the "course" edge ID in the mutation.
func (m *DiscussionBoardMutation) CourseID() (id int, exists bool) {
	if m.course != nil {
		return *m.course, true
	}
	return
}

// CourseIDs returns the "course" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CourseID instead. It exists only for internal usage by the builders.
func (m *DiscussionBoardMutation) CourseIDs() (ids []int) {
	if id := m.course; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCourse resets all changes to the "course" edge.
func (m *DiscussionBoardMutation) ResetCourse() {
	m.course = nil
	m.clearedcourse = false
}

// Where appends a list predicates to the DiscussionBoardMutation builder.
func (m *DiscussionBoardMutation) Where(ps ...predicate.DiscussionBoard) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DiscussionBoardMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DiscussionBoardMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DiscussionBoard, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DiscussionBoardMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DiscussionBoardMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DiscussionBoard).
func (m *DiscussionBoardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiscussionBoardMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, discussionboard.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiscussionBoardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case discussionboard.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiscussionBoardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case discussionboard.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown DiscussionBoard field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscussionBoardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case discussionboard.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown DiscussionBoard field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiscussionBoardMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiscussionBoardMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiscussionBoardMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DiscussionBoard numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiscussionBoardMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiscussionBoardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiscussionBoardMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DiscussionBoard nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiscussionBoardMutation) ResetField(name string) error {
	switch name {
	case discussionboard.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown DiscussionBoard field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiscussionBoardMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.posts != nil {
		edges = append(edges, discussionboard.EdgePosts)
	}
	if m.course != nil {
		edges = append(edges, discussionboard.EdgeCourse)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiscussionBoardMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case discussionboard.EdgePosts:
		ids := make([]ent.Value, 0, len(m.posts))
		for id := range m.posts {
			ids = append(ids, id)
		}
		return ids
	case discussionboard.EdgeCourse:
		if id := m.course; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiscussionBoardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedposts != nil {
		edges = append(edges, discussionboard.EdgePosts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiscussionBoardMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case discussionboard.EdgePosts:
		ids := make([]ent.Value, 0, len(m.removedposts))
		for id := range m.removedposts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiscussionBoardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedposts {
		edges = append(edges, discussionboard.EdgePosts)
	}
	if m.clearedcourse {
		edges = append(edges, discussionboard.EdgeCourse)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiscussionBoardMutation) EdgeCleared(name string) bool {
	switch name {
	case discussionboard.EdgePosts:
		return m.clearedposts
	case discussionboard.EdgeCourse:
		return m.clearedcourse
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiscussionBoardMutation) ClearEdge(name string) error {
	switch name {
	case discussionboard.EdgeCourse:
		m.ClearCourse()
		return nil
	}
	return fmt.Errorf("unknown DiscussionBoard unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiscussionBoardMutation) ResetEdge(name string) error {
	switch name {
	case discussionboard.EdgePosts:
		m.ResetPosts()
		return nil
	case discussionboard.EdgeCourse:
		m.ResetCourse()
		return nil
	}
	return fmt.Errorf("unknown DiscussionBoard edge %s", name)
}

// PostMutation represents an operation that mutates the Post nodes in the graph.
type PostMutation struct {
	config
	op             Op
	typ            string
	id             *int
	title          *string
	content        *string
	clearedFields  map[string]struct{}
	author         *int
	clearedauthor  bool
	board          *int
	clearedboard   bool
	replies        map[int]struct{}
	removedreplies map[int]struct{}
	clearedreplies bool
	done           bool
	oldValue       func(context.Context) (*Post, error)
	predicates     []predicate.Post
}

var _ ent.Mutation = (*PostMutation)(nil)

// postOption allows management of the mutation configuration using functional options.
type postOption func(*PostMutation)

// newPostMutation creates new mutation for the Post entity.
func newPostMutation(c config, op Op, opts ...postOption) *PostMutation {
	m := &PostMutation{
		config:        c,
		op:            op,
		typ:           TypePost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPostID sets the ID field of the mutation.
func withPostID(id int) postOption {
	return func(m *PostMutation) {
		var (
			err   error
			once  sync.Once
			value *Post
		)
		m.oldValue = func(ctx context.Context) (*Post, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Post.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPost sets the old Post of the mutation.
func withPost(node *Post) postOption {
	return func(m *PostMutation) {
		m.oldValue = func(context.Context) (*Post, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PostMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Post.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *PostMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *PostMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *PostMutation) ResetTitle() {
	m.title = nil
}

// SetContent sets the "content" field.
func (m *PostMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *PostMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *PostMutation) ResetContent() {
	m.content = nil
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *PostMutation) SetAuthorID(id int) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *PostMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *PostMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *PostMutation) AuthorID() (id int, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *PostMutation) AuthorIDs() (ids []int) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *PostMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// SetBoardID sets the "board" edge to the DiscussionBoard entity by id.
func (m *PostMutation) SetBoardID(id int) {
	m.board = &id
}

// ClearBoard clears the "board" edge to the DiscussionBoard entity.
func (m *PostMutation) ClearBoard() {
	m.clearedboard = true
}

// BoardCleared reports if the "board" edge to the DiscussionBoard entity was cleared.
func (m *PostMutation) BoardCleared() bool {
	return m.clearedboard
}

// BoardID returns the "board" edge ID in the mutation.
func (m *PostMutation) BoardID() (id int, exists bool) {
	if m.board != nil {
		return *m.board, true
	}
	return
}

// BoardIDs returns the "board" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BoardID instead. It exists only for internal usage by the builders.
func (m *PostMutation) BoardIDs() (ids []int) {
	if id := m.board; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBoard resets all changes to the "board" edge.
func (m *PostMutation) ResetBoard() {
	m.board = nil
	m.clearedboard = false
}

// AddReplyIDs adds the "replies" edge to the Reply entity by ids.
func (m *PostMutation) AddReplyIDs(ids ...int) {
	if m.replies == nil {
		m.replies = make(map[int]struct{})
	}
	for i := range ids {
		m.replies[ids[i]] = struct{}{}
	}
}

// ClearReplies clears the "replies" edge to the Reply entity.
func (m *PostMutation) ClearReplies() {
	m.clearedreplies = true
}

// RepliesCleared reports if the "replies" edge to the Reply entity was cleared.
func (m *PostMutation) RepliesCleared() bool {
	return m.clearedreplies
}

// RemoveReplyIDs removes the "replies" edge to the Reply entity by IDs.
func (m *PostMutation) RemoveReplyIDs(ids ...int) {
	if m.removedreplies == nil {
		m.removedreplies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.replies, ids[i])
		m.removedreplies[ids[i]] = struct{}{}
	}
}

// RemovedReplies returns the removed IDs of the "replies" edge to the Reply entity.
func (m *PostMutation) RemovedRepliesIDs() (ids []int) {
	for id := range m.removedreplies {
		ids = append(ids, id)
	}
	return
}

// RepliesIDs returns the "replies" edge IDs in the mutation.
func (m *PostMutation) RepliesIDs() (ids []int) {
	for id := range m.replies {
		ids = append(ids, id)
	}
	return
}

// ResetReplies resets all changes to the "replies" edge.
func (m *PostMutation) ResetReplies() {
	m.replies = nil
	m.clearedreplies = false
	m.removedreplies = nil
}

// Where appends a list predicates to the PostMutation builder.
func (m *PostMutation) Where(ps ...predicate.Post) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Post, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Post).
func (m *PostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PostMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.title != nil {
		fields = append(fields, post.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, post.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case post.FieldTitle:
		return m.Title()
	case post.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case post.FieldTitle:
		return m.OldTitle(ctx)
	case post.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown Post field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case post.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case post.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Post numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PostMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PostMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Post nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PostMutation) ResetField(name string) error {
	switch name {
	case post.FieldTitle:
		m.ResetTitle()
		return nil
	case post.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PostMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.author != nil {
		edges = append(edges, post.EdgeAuthor)
	}
	if m.board != nil {
		edges = append(edges, post.EdgeBoard)
	}
	if m.replies != nil {
		edges = append(edges, post.EdgeReplies)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case post.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case post.EdgeBoard:
		if id := m.board; id != nil {
			return []ent.Value{*id}
		}
	case post.EdgeReplies:
		ids := make([]ent.Value, 0, len(m.replies))
		for id := range m.replies {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedreplies != nil {
		edges = append(edges, post.EdgeReplies)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case post.EdgeReplies:
		ids := make([]ent.Value, 0, len(m.removedreplies))
		for id := range m.removedreplies {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedauthor {
		edges = append(edges, post.EdgeAuthor)
	}
	if m.clearedboard {
		edges = append(edges, post.EdgeBoard)
	}
	if m.clearedreplies {
		edges = append(edges, post.EdgeReplies)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PostMutation) EdgeCleared(name string) bool {
	switch name {
	case post.EdgeAuthor:
		return m.clearedauthor
	case post.EdgeBoard:
		return m.clearedboard
	case post.EdgeReplies:
		return m.clearedreplies
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PostMutation) ClearEdge(name string) error {
	switch name {
	case post.EdgeAuthor:
		m.ClearAuthor()
		return nil
	case post.EdgeBoard:
		m.ClearBoard()
		return nil
	}
	return fmt.Errorf("unknown Post unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PostMutation) ResetEdge(name string) error {
	switch name {
	case post.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case post.EdgeBoard:
		m.ResetBoard()
		return nil
	case post.EdgeReplies:
		m.ResetReplies()
		return nil
	}
	return fmt.Errorf("unknown Post edge %s", name)
}

// ReplyMutation represents an operation that mutates the Reply nodes in the graph.
type ReplyMutation struct {
	config
	op            Op
	typ           string
	id            *int
	content       *string
	clearedFields map[string]struct{}
	author        *int
	clearedauthor bool
	post          *int
	clearedpost   bool
	done          bool
	oldValue      func(context.Context) (*Reply, error)
	predicates    []predicate.Reply
}

var _ ent.Mutation = (*ReplyMutation)(nil)

// replyOption allows management of the mutation configuration using functional options.
type replyOption func(*ReplyMutation)

// newReplyMutation creates new mutation for the Reply entity.
func newReplyMutation(c config, op Op, opts ...replyOption) *ReplyMutation {
	m := &ReplyMutation{
		config:        c,
		op:            op,
		typ:           TypeReply,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReplyID sets the ID field of the mutation.
func withReplyID(id int) replyOption {
	return func(m *ReplyMutation) {
		var (
			err   error
			once  sync.Once
			value *Reply
		)
		m.oldValue = func(ctx context.Context) (*Reply, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Reply.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReply sets the old Reply of the mutation.
func withReply(node *Reply) replyOption {
	return func(m *ReplyMutation) {
		m.oldValue = func(context.Context) (*Reply, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReplyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReplyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReplyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReplyMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Reply.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetContent sets the "content" field.
func (m *ReplyMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ReplyMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Reply entity.
// If the Reply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReplyMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *ReplyMutation) ResetContent() {
	m.content = nil
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *ReplyMutation) SetAuthorID(id int) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *ReplyMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *ReplyMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *ReplyMutation) AuthorID() (id int, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *ReplyMutation) AuthorIDs() (ids []int) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *ReplyMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// SetPostID sets the "post" edge to the Post entity by id.
func (m *ReplyMutation) SetPostID(id int) {
	m.post = &id
}

// ClearPost clears the "post" edge to the Post entity.
func (m *ReplyMutation) ClearPost() {
	m.clearedpost = true
}

// PostCleared reports if the "post" edge to the Post entity was cleared.
func (m *ReplyMutation) PostCleared() bool {
	return m.clearedpost
}

// PostID returns the "post" edge ID in the mutation.
func (m *ReplyMutation) PostID() (id int, exists bool) {
	if m.post != nil {
		return *m.post, true
	}
	return
}

// PostIDs returns the "post" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PostID instead. It exists only for internal usage by the builders.
func (m *ReplyMutation) PostIDs() (ids []int) {
	if id := m.post; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPost resets all changes to the "post" edge.
func (m *ReplyMutation) ResetPost() {
	m.post = nil
	m.clearedpost = false
}

// Where appends a list predicates to the ReplyMutation builder.
func (m *ReplyMutation) Where(ps ...predicate.Reply) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ReplyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ReplyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Reply, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ReplyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ReplyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Reply).
func (m *ReplyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReplyMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.content != nil {
		fields = append(fields, reply.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReplyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reply.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReplyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reply.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown Reply field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReplyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reply.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown Reply field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReplyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReplyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReplyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Reply numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReplyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReplyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReplyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Reply nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReplyMutation) ResetField(name string) error {
	switch name {
	case reply.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown Reply field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReplyMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.author != nil {
		edges = append(edges, reply.EdgeAuthor)
	}
	if m.post != nil {
		edges = append(edges, reply.EdgePost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReplyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case reply.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case reply.EdgePost:
		if id := m.post; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReplyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReplyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReplyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedauthor {
		edges = append(edges, reply.EdgeAuthor)
	}
	if m.clearedpost {
		edges = append(edges, reply.EdgePost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReplyMutation) EdgeCleared(name string) bool {
	switch name {
	case reply.EdgeAuthor:
		return m.clearedauthor
	case reply.EdgePost:
		return m.clearedpost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReplyMutation) ClearEdge(name string) error {
	switch name {
	case reply.EdgeAuthor:
		m.ClearAuthor()
		return nil
	case reply.EdgePost:
		m.ClearPost()
		return nil
	}
	return fmt.Errorf("unknown Reply unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReplyMutation) ResetEdge(name string) error {
	switch name {
	case reply.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case reply.EdgePost:
		m.ResetPost()
		return nil
	}
	return fmt.Errorf("unknown Reply edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *int
	first_name                         *string
	middle_name                        *string
	last_name                          *string
	email                              *string
	password                           *string
	role                               *user.Role
	clearedFields                      map[string]struct{}
	posts                              map[int]struct{}
	removedposts                       map[int]struct{}
	clearedposts                       bool
	replies                            map[int]struct{}
	removedreplies                     map[int]struct{}
	clearedreplies                     bool
	teaching_sections                  map[int]struct{}
	removedteaching_sections           map[int]struct{}
	clearedteaching_sections           bool
	teaching_assistant_sections        map[int]struct{}
	removedteaching_assistant_sections map[int]struct{}
	clearedteaching_assistant_sections bool
	course_assistant_sections          map[int]struct{}
	removedcourse_assistant_sections   map[int]struct{}
	clearedcourse_assistant_sections   bool
	enrolled_sections                  map[int]struct{}
	removedenrolled_sections           map[int]struct{}
	clearedenrolled_sections           bool
	done                               bool
	oldValue                           func(context.Context) (*User, error)
	predicates                         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetMiddleName sets the "middle_name" field.
func (m *UserMutation) SetMiddleName(s string) {
	m.middle_name = &s
}

// MiddleName returns the value of the "middle_name" field in the mutation.
func (m *UserMutation) MiddleName() (r string, exists bool) {
	v := m.middle_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMiddleName returns the old "middle_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMiddleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMiddleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMiddleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMiddleName: %w", err)
	}
	return oldValue.MiddleName, nil
}

// ClearMiddleName clears the value of the "middle_name" field.
func (m *UserMutation) ClearMiddleName() {
	m.middle_name = nil
	m.clearedFields[user.FieldMiddleName] = struct{}{}
}

// MiddleNameCleared returns if the "middle_name" field was cleared in this mutation.
func (m *UserMutation) MiddleNameCleared() bool {
	_, ok := m.clearedFields[user.FieldMiddleName]
	return ok
}

// ResetMiddleName resets all changes to the "middle_name" field.
func (m *UserMutation) ResetMiddleName() {
	m.middle_name = nil
	delete(m.clearedFields, user.FieldMiddleName)
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// AddPostIDs adds the "posts" edge to the Post entity by ids.
func (m *UserMutation) AddPostIDs(ids ...int) {
	if m.posts == nil {
		m.posts = make(map[int]struct{})
	}
	for i := range ids {
		m.posts[ids[i]] = struct{}{}
	}
}

// ClearPosts clears the "posts" edge to the Post entity.
func (m *UserMutation) ClearPosts() {
	m.clearedposts = true
}

// PostsCleared reports if the "posts" edge to the Post entity was cleared.
func (m *UserMutation) PostsCleared() bool {
	return m.clearedposts
}

// RemovePostIDs removes the "posts" edge to the Post entity by IDs.
func (m *UserMutation) RemovePostIDs(ids ...int) {
	if m.removedposts == nil {
		m.removedposts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.posts, ids[i])
		m.removedposts[ids[i]] = struct{}{}
	}
}

// RemovedPosts returns the removed IDs of the "posts" edge to the Post entity.
func (m *UserMutation) RemovedPostsIDs() (ids []int) {
	for id := range m.removedposts {
		ids = append(ids, id)
	}
	return
}

// PostsIDs returns the "posts" edge IDs in the mutation.
func (m *UserMutation) PostsIDs() (ids []int) {
	for id := range m.posts {
		ids = append(ids, id)
	}
	return
}

// ResetPosts resets all changes to the "posts" edge.
func (m *UserMutation) ResetPosts() {
	m.posts = nil
	m.clearedposts = false
	m.removedposts = nil
}

// AddReplyIDs adds the "replies" edge to the Reply entity by ids.
func (m *UserMutation) AddReplyIDs(ids ...int) {
	if m.replies == nil {
		m.replies = make(map[int]struct{})
	}
	for i := range ids {
		m.replies[ids[i]] = struct{}{}
	}
}

// ClearReplies clears the "replies" edge to the Reply entity.
func (m *UserMutation) ClearReplies() {
	m.clearedreplies = true
}

// RepliesCleared reports if the "replies" edge to the Reply entity was cleared.
func (m *UserMutation) RepliesCleared() bool {
	return m.clearedreplies
}

// RemoveReplyIDs removes the "replies" edge to the Reply entity by IDs.
func (m *UserMutation) RemoveReplyIDs(ids ...int) {
	if m.removedreplies == nil {
		m.removedreplies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.replies, ids[i])
		m.removedreplies[ids[i]] = struct{}{}
	}
}

// RemovedReplies returns the removed IDs of the "replies" edge to the Reply entity.
func (m *UserMutation) RemovedRepliesIDs() (ids []int) {
	for id := range m.removedreplies {
		ids = append(ids, id)
	}
	return
}

// RepliesIDs returns the "replies" edge IDs in the mutation.
func (m *UserMutation) RepliesIDs() (ids []int) {
	for id := range m.replies {
		ids = append(ids, id)
	}
	return
}

// ResetReplies resets all changes to the "replies" edge.
func (m *UserMutation) ResetReplies() {
	m.replies = nil
	m.clearedreplies = false
	m.removedreplies = nil
}

// AddTeachingSectionIDs adds the "teaching_sections" edge to the CourseSection entity by ids.
func (m *UserMutation) AddTeachingSectionIDs(ids ...int) {
	if m.teaching_sections == nil {
		m.teaching_sections = make(map[int]struct{})
	}
	for i := range ids {
		m.teaching_sections[ids[i]] = struct{}{}
	}
}

// ClearTeachingSections clears the "teaching_sections" edge to the CourseSection entity.
func (m *UserMutation) ClearTeachingSections() {
	m.clearedteaching_sections = true
}

// TeachingSectionsCleared reports if the "teaching_sections" edge to the CourseSection entity was cleared.
func (m *UserMutation) TeachingSectionsCleared() bool {
	return m.clearedteaching_sections
}

// RemoveTeachingSectionIDs removes the "teaching_sections" edge to the CourseSection entity by IDs.
func (m *UserMutation) RemoveTeachingSectionIDs(ids ...int) {
	if m.removedteaching_sections == nil {
		m.removedteaching_sections = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.teaching_sections, ids[i])
		m.removedteaching_sections[ids[i]] = struct{}{}
	}
}

// RemovedTeachingSections returns the removed IDs of the "teaching_sections" edge to the CourseSection entity.
func (m *UserMutation) RemovedTeachingSectionsIDs() (ids []int) {
	for id := range m.removedteaching_sections {
		ids = append(ids, id)
	}
	return
}

// TeachingSectionsIDs returns the "teaching_sections" edge IDs in the mutation.
func (m *UserMutation) TeachingSectionsIDs() (ids []int) {
	for id := range m.teaching_sections {
		ids = append(ids, id)
	}
	return
}

// ResetTeachingSections resets all changes to the "teaching_sections" edge.
func (m *UserMutation) ResetTeachingSections() {
	m.teaching_sections = nil
	m.clearedteaching_sections = false
	m.removedteaching_sections = nil
}

// AddTeachingAssistantSectionIDs adds the "teaching_assistant_sections" edge to the CourseSection entity by ids.
func (m *UserMutation) AddTeachingAssistantSectionIDs(ids ...int) {
	if m.teaching_assistant_sections == nil {
		m.teaching_assistant_sections = make(map[int]struct{})
	}
	for i := range ids {
		m.teaching_assistant_sections[ids[i]] = struct{}{}
	}
}

// ClearTeachingAssistantSections clears the "teaching_assistant_sections" edge to the CourseSection entity.
func (m *UserMutation) ClearTeachingAssistantSections() {
	m.clearedteaching_assistant_sections = true
}

// TeachingAssistantSectionsCleared reports if the "teaching_assistant_sections" edge to the CourseSection entity was cleared.
func (m *UserMutation) TeachingAssistantSectionsCleared() bool {
	return m.clearedteaching_assistant_sections
}

// RemoveTeachingAssistantSectionIDs removes the "teaching_assistant_sections" edge to the CourseSection entity by IDs.
func (m *UserMutation) RemoveTeachingAssistantSectionIDs(ids ...int) {
	if m.removedteaching_assistant_sections == nil {
		m.removedteaching_assistant_sections = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.teaching_assistant_sections, ids[i])
		m.removedteaching_assistant_sections[ids[i]] = struct{}{}
	}
}

// RemovedTeachingAssistantSections returns the removed IDs of the "teaching_assistant_sections" edge to the CourseSection entity.
func (m *UserMutation) RemovedTeachingAssistantSectionsIDs() (ids []int) {
	for id := range m.removedteaching_assistant_sections {
		ids = append(ids, id)
	}
	return
}

// TeachingAssistantSectionsIDs returns the "teaching_assistant_sections" edge IDs in the mutation.
func (m *UserMutation) TeachingAssistantSectionsIDs() (ids []int) {
	for id := range m.teaching_assistant_sections {
		ids = append(ids, id)
	}
	return
}

// ResetTeachingAssistantSections resets all changes to the "teaching_assistant_sections" edge.
func (m *UserMutation) ResetTeachingAssistantSections() {
	m.teaching_assistant_sections = nil
	m.clearedteaching_assistant_sections = false
	m.removedteaching_assistant_sections = nil
}

// AddCourseAssistantSectionIDs adds the "course_assistant_sections" edge to the CourseSection entity by ids.
func (m *UserMutation) AddCourseAssistantSectionIDs(ids ...int) {
	if m.course_assistant_sections == nil {
		m.course_assistant_sections = make(map[int]struct{})
	}
	for i := range ids {
		m.course_assistant_sections[ids[i]] = struct{}{}
	}
}

// ClearCourseAssistantSections clears the "course_assistant_sections" edge to the CourseSection entity.
func (m *UserMutation) ClearCourseAssistantSections() {
	m.clearedcourse_assistant_sections = true
}

// CourseAssistantSectionsCleared reports if the "course_assistant_sections" edge to the CourseSection entity was cleared.
func (m *UserMutation) CourseAssistantSectionsCleared() bool {
	return m.clearedcourse_assistant_sections
}

// RemoveCourseAssistantSectionIDs removes the "course_assistant_sections" edge to the CourseSection entity by IDs.
func (m *UserMutation) RemoveCourseAssistantSectionIDs(ids ...int) {
	if m.removedcourse_assistant_sections == nil {
		m.removedcourse_assistant_sections = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.course_assistant_sections, ids[i])
		m.removedcourse_assistant_sections[ids[i]] = struct{}{}
	}
}

// RemovedCourseAssistantSections returns the removed IDs of the "course_assistant_sections" edge to the CourseSection entity.
func (m *UserMutation) RemovedCourseAssistantSectionsIDs() (ids []int) {
	for id := range m.removedcourse_assistant_sections {
		ids = append(ids, id)
	}
	return
}

// CourseAssistantSectionsIDs returns the "course_assistant_sections" edge IDs in the mutation.
func (m *UserMutation) CourseAssistantSectionsIDs() (ids []int) {
	for id := range m.course_assistant_sections {
		ids = append(ids, id)
	}
	return
}

// ResetCourseAssistantSections resets all changes to the "course_assistant_sections" edge.
func (m *UserMutation) ResetCourseAssistantSections() {
	m.course_assistant_sections = nil
	m.clearedcourse_assistant_sections = false
	m.removedcourse_assistant_sections = nil
}

// AddEnrolledSectionIDs adds the "enrolled_sections" edge to the CourseSection entity by ids.
func (m *UserMutation) AddEnrolledSectionIDs(ids ...int) {
	if m.enrolled_sections == nil {
		m.enrolled_sections = make(map[int]struct{})
	}
	for i := range ids {
		m.enrolled_sections[ids[i]] = struct{}{}
	}
}

// ClearEnrolledSections clears the "enrolled_sections" edge to the CourseSection entity.
func (m *UserMutation) ClearEnrolledSections() {
	m.clearedenrolled_sections = true
}

// EnrolledSectionsCleared reports if the "enrolled_sections" edge to the CourseSection entity was cleared.
func (m *UserMutation) EnrolledSectionsCleared() bool {
	return m.clearedenrolled_sections
}

// RemoveEnrolledSectionIDs removes the "enrolled_sections" edge to the CourseSection entity by IDs.
func (m *UserMutation) RemoveEnrolledSectionIDs(ids ...int) {
	if m.removedenrolled_sections == nil {
		m.removedenrolled_sections = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.enrolled_sections, ids[i])
		m.removedenrolled_sections[ids[i]] = struct{}{}
	}
}

// RemovedEnrolledSections returns the removed IDs of the "enrolled_sections" edge to the CourseSection entity.
func (m *UserMutation) RemovedEnrolledSectionsIDs() (ids []int) {
	for id := range m.removedenrolled_sections {
		ids = append(ids, id)
	}
	return
}

// EnrolledSectionsIDs returns the "enrolled_sections" edge IDs in the mutation.
func (m *UserMutation) EnrolledSectionsIDs() (ids []int) {
	for id := range m.enrolled_sections {
		ids = append(ids, id)
	}
	return
}

// ResetEnrolledSections resets all changes to the "enrolled_sections" edge.
func (m *UserMutation) ResetEnrolledSections() {
	m.enrolled_sections = nil
	m.clearedenrolled_sections = false
	m.removedenrolled_sections = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.middle_name != nil {
		fields = append(fields, user.FieldMiddleName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldMiddleName:
		return m.MiddleName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldMiddleName:
		return m.OldMiddleName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldMiddleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMiddleName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldMiddleName) {
		fields = append(fields, user.FieldMiddleName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldMiddleName:
		m.ClearMiddleName()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldMiddleName:
		m.ResetMiddleName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.posts != nil {
		edges = append(edges, user.EdgePosts)
	}
	if m.replies != nil {
		edges = append(edges, user.EdgeReplies)
	}
	if m.teaching_sections != nil {
		edges = append(edges, user.EdgeTeachingSections)
	}
	if m.teaching_assistant_sections != nil {
		edges = append(edges, user.EdgeTeachingAssistantSections)
	}
	if m.course_assistant_sections != nil {
		edges = append(edges, user.EdgeCourseAssistantSections)
	}
	if m.enrolled_sections != nil {
		edges = append(edges, user.EdgeEnrolledSections)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePosts:
		ids := make([]ent.Value, 0, len(m.posts))
		for id := range m.posts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeReplies:
		ids := make([]ent.Value, 0, len(m.replies))
		for id := range m.replies {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTeachingSections:
		ids := make([]ent.Value, 0, len(m.teaching_sections))
		for id := range m.teaching_sections {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTeachingAssistantSections:
		ids := make([]ent.Value, 0, len(m.teaching_assistant_sections))
		for id := range m.teaching_assistant_sections {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCourseAssistantSections:
		ids := make([]ent.Value, 0, len(m.course_assistant_sections))
		for id := range m.course_assistant_sections {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEnrolledSections:
		ids := make([]ent.Value, 0, len(m.enrolled_sections))
		for id := range m.enrolled_sections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedposts != nil {
		edges = append(edges, user.EdgePosts)
	}
	if m.removedreplies != nil {
		edges = append(edges, user.EdgeReplies)
	}
	if m.removedteaching_sections != nil {
		edges = append(edges, user.EdgeTeachingSections)
	}
	if m.removedteaching_assistant_sections != nil {
		edges = append(edges, user.EdgeTeachingAssistantSections)
	}
	if m.removedcourse_assistant_sections != nil {
		edges = append(edges, user.EdgeCourseAssistantSections)
	}
	if m.removedenrolled_sections != nil {
		edges = append(edges, user.EdgeEnrolledSections)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePosts:
		ids := make([]ent.Value, 0, len(m.removedposts))
		for id := range m.removedposts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeReplies:
		ids := make([]ent.Value, 0, len(m.removedreplies))
		for id := range m.removedreplies {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTeachingSections:
		ids := make([]ent.Value, 0, len(m.removedteaching_sections))
		for id := range m.removedteaching_sections {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTeachingAssistantSections:
		ids := make([]ent.Value, 0, len(m.removedteaching_assistant_sections))
		for id := range m.removedteaching_assistant_sections {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCourseAssistantSections:
		ids := make([]ent.Value, 0, len(m.removedcourse_assistant_sections))
		for id := range m.removedcourse_assistant_sections {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEnrolledSections:
		ids := make([]ent.Value, 0, len(m.removedenrolled_sections))
		for id := range m.removedenrolled_sections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedposts {
		edges = append(edges, user.EdgePosts)
	}
	if m.clearedreplies {
		edges = append(edges, user.EdgeReplies)
	}
	if m.clearedteaching_sections {
		edges = append(edges, user.EdgeTeachingSections)
	}
	if m.clearedteaching_assistant_sections {
		edges = append(edges, user.EdgeTeachingAssistantSections)
	}
	if m.clearedcourse_assistant_sections {
		edges = append(edges, user.EdgeCourseAssistantSections)
	}
	if m.clearedenrolled_sections {
		edges = append(edges, user.EdgeEnrolledSections)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePosts:
		return m.clearedposts
	case user.EdgeReplies:
		return m.clearedreplies
	case user.EdgeTeachingSections:
		return m.clearedteaching_sections
	case user.EdgeTeachingAssistantSections:
		return m.clearedteaching_assistant_sections
	case user.EdgeCourseAssistantSections:
		return m.clearedcourse_assistant_sections
	case user.EdgeEnrolledSections:
		return m.clearedenrolled_sections
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePosts:
		m.ResetPosts()
		return nil
	case user.EdgeReplies:
		m.ResetReplies()
		return nil
	case user.EdgeTeachingSections:
		m.ResetTeachingSections()
		return nil
	case user.EdgeTeachingAssistantSections:
		m.ResetTeachingAssistantSections()
		return nil
	case user.EdgeCourseAssistantSections:
		m.ResetCourseAssistantSections()
		return nil
	case user.EdgeEnrolledSections:
		m.ResetEnrolledSections()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
