// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldMiddleName holds the string denoting the middle_name field in the database.
	FieldMiddleName = "middle_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgePosts holds the string denoting the posts edge name in mutations.
	EdgePosts = "posts"
	// EdgeReplies holds the string denoting the replies edge name in mutations.
	EdgeReplies = "replies"
	// EdgeTeachingSections holds the string denoting the teaching_sections edge name in mutations.
	EdgeTeachingSections = "teaching_sections"
	// EdgeTeachingAssistantSections holds the string denoting the teaching_assistant_sections edge name in mutations.
	EdgeTeachingAssistantSections = "teaching_assistant_sections"
	// EdgeCourseAssistantSections holds the string denoting the course_assistant_sections edge name in mutations.
	EdgeCourseAssistantSections = "course_assistant_sections"
	// EdgeEnrolledSections holds the string denoting the enrolled_sections edge name in mutations.
	EdgeEnrolledSections = "enrolled_sections"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PostsTable is the table that holds the posts relation/edge.
	PostsTable = "posts"
	// PostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostsInverseTable = "posts"
	// PostsColumn is the table column denoting the posts relation/edge.
	PostsColumn = "user_posts"
	// RepliesTable is the table that holds the replies relation/edge.
	RepliesTable = "replies"
	// RepliesInverseTable is the table name for the Reply entity.
	// It exists in this package in order to avoid circular dependency with the "reply" package.
	RepliesInverseTable = "replies"
	// RepliesColumn is the table column denoting the replies relation/edge.
	RepliesColumn = "user_replies"
	// TeachingSectionsTable is the table that holds the teaching_sections relation/edge. The primary key declared below.
	TeachingSectionsTable = "user_teaching_sections"
	// TeachingSectionsInverseTable is the table name for the CourseSection entity.
	// It exists in this package in order to avoid circular dependency with the "coursesection" package.
	TeachingSectionsInverseTable = "course_sections"
	// TeachingAssistantSectionsTable is the table that holds the teaching_assistant_sections relation/edge. The primary key declared below.
	TeachingAssistantSectionsTable = "user_teaching_assistant_sections"
	// TeachingAssistantSectionsInverseTable is the table name for the CourseSection entity.
	// It exists in this package in order to avoid circular dependency with the "coursesection" package.
	TeachingAssistantSectionsInverseTable = "course_sections"
	// CourseAssistantSectionsTable is the table that holds the course_assistant_sections relation/edge. The primary key declared below.
	CourseAssistantSectionsTable = "user_course_assistant_sections"
	// CourseAssistantSectionsInverseTable is the table name for the CourseSection entity.
	// It exists in this package in order to avoid circular dependency with the "coursesection" package.
	CourseAssistantSectionsInverseTable = "course_sections"
	// EnrolledSectionsTable is the table that holds the enrolled_sections relation/edge. The primary key declared below.
	EnrolledSectionsTable = "user_enrolled_sections"
	// EnrolledSectionsInverseTable is the table name for the CourseSection entity.
	// It exists in this package in order to avoid circular dependency with the "coursesection" package.
	EnrolledSectionsInverseTable = "course_sections"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldFirstName,
	FieldMiddleName,
	FieldLastName,
	FieldEmail,
	FieldPassword,
	FieldRole,
}

var (
	// TeachingSectionsPrimaryKey and TeachingSectionsColumn2 are the table columns denoting the
	// primary key for the teaching_sections relation (M2M).
	TeachingSectionsPrimaryKey = []string{"user_id", "course_section_id"}
	// TeachingAssistantSectionsPrimaryKey and TeachingAssistantSectionsColumn2 are the table columns denoting the
	// primary key for the teaching_assistant_sections relation (M2M).
	TeachingAssistantSectionsPrimaryKey = []string{"user_id", "course_section_id"}
	// CourseAssistantSectionsPrimaryKey and CourseAssistantSectionsColumn2 are the table columns denoting the
	// primary key for the course_assistant_sections relation (M2M).
	CourseAssistantSectionsPrimaryKey = []string{"user_id", "course_section_id"}
	// EnrolledSectionsPrimaryKey and EnrolledSectionsColumn2 are the table columns denoting the
	// primary key for the enrolled_sections relation (M2M).
	EnrolledSectionsPrimaryKey = []string{"user_id", "course_section_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
)

// Role defines the type for the "role" enum field.
type Role string

// RoleSTUDENT is the default value of the Role enum.
const DefaultRole = RoleSTUDENT

// Role values.
const (
	RolePROFESSOR Role = "PROFESSOR"
	RoleTA        Role = "TA"
	RoleCA        Role = "CA"
	RoleSTUDENT   Role = "STUDENT"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RolePROFESSOR, RoleTA, RoleCA, RoleSTUDENT:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByMiddleName orders the results by the middle_name field.
func ByMiddleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMiddleName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByPostsCount orders the results by posts count.
func ByPostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostsStep(), opts...)
	}
}

// ByPosts orders the results by posts terms.
func ByPosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRepliesCount orders the results by replies count.
func ByRepliesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepliesStep(), opts...)
	}
}

// ByReplies orders the results by replies terms.
func ByReplies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepliesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTeachingSectionsCount orders the results by teaching_sections count.
func ByTeachingSectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTeachingSectionsStep(), opts...)
	}
}

// ByTeachingSections orders the results by teaching_sections terms.
func ByTeachingSections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeachingSectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTeachingAssistantSectionsCount orders the results by teaching_assistant_sections count.
func ByTeachingAssistantSectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTeachingAssistantSectionsStep(), opts...)
	}
}

// ByTeachingAssistantSections orders the results by teaching_assistant_sections terms.
func ByTeachingAssistantSections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeachingAssistantSectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCourseAssistantSectionsCount orders the results by course_assistant_sections count.
func ByCourseAssistantSectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCourseAssistantSectionsStep(), opts...)
	}
}

// ByCourseAssistantSections orders the results by course_assistant_sections terms.
func ByCourseAssistantSections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCourseAssistantSectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEnrolledSectionsCount orders the results by enrolled_sections count.
func ByEnrolledSectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEnrolledSectionsStep(), opts...)
	}
}

// ByEnrolledSections orders the results by enrolled_sections terms.
func ByEnrolledSections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnrolledSectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
	)
}
func newRepliesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepliesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RepliesTable, RepliesColumn),
	)
}
func newTeachingSectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeachingSectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TeachingSectionsTable, TeachingSectionsPrimaryKey...),
	)
}
func newTeachingAssistantSectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeachingAssistantSectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TeachingAssistantSectionsTable, TeachingAssistantSectionsPrimaryKey...),
	)
}
func newCourseAssistantSectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CourseAssistantSectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CourseAssistantSectionsTable, CourseAssistantSectionsPrimaryKey...),
	)
}
func newEnrolledSectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnrolledSectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EnrolledSectionsTable, EnrolledSectionsPrimaryKey...),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Role) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Role) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Role(str)
	if err := RoleValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}
