// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/course"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/discussionboard"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/post"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/predicate"
)

// DiscussionBoardUpdate is the builder for updating DiscussionBoard entities.
type DiscussionBoardUpdate struct {
	config
	hooks    []Hook
	mutation *DiscussionBoardMutation
}

// Where appends a list predicates to the DiscussionBoardUpdate builder.
func (_u *DiscussionBoardUpdate) Where(ps ...predicate.DiscussionBoard) *DiscussionBoardUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_u *DiscussionBoardUpdate) AddPostIDs(ids ...int) *DiscussionBoardUpdate {
	_u.mutation.AddPostIDs(ids...)
	return _u
}

// AddPosts adds the "posts" edges to the Post entity.
func (_u *DiscussionBoardUpdate) AddPosts(v ...*Post) *DiscussionBoardUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostIDs(ids...)
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (_u *DiscussionBoardUpdate) SetCourseID(id int) *DiscussionBoardUpdate {
	_u.mutation.SetCourseID(id)
	return _u
}

// SetCourse sets the "course" edge to the Course entity.
func (_u *DiscussionBoardUpdate) SetCourse(v *Course) *DiscussionBoardUpdate {
	return _u.SetCourseID(v.ID)
}

// Mutation returns the DiscussionBoardMutation object of the builder.
func (_u *DiscussionBoardUpdate) Mutation() *DiscussionBoardMutation {
	return _u.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (_u *DiscussionBoardUpdate) ClearPosts() *DiscussionBoardUpdate {
	_u.mutation.ClearPosts()
	return _u
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (_u *DiscussionBoardUpdate) RemovePostIDs(ids ...int) *DiscussionBoardUpdate {
	_u.mutation.RemovePostIDs(ids...)
	return _u
}

// RemovePosts removes "posts" edges to Post entities.
func (_u *DiscussionBoardUpdate) RemovePosts(v ...*Post) *DiscussionBoardUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostIDs(ids...)
}

// ClearCourse clears the "course" edge to the Course entity.
func (_u *DiscussionBoardUpdate) ClearCourse() *DiscussionBoardUpdate {
	_u.mutation.ClearCourse()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DiscussionBoardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DiscussionBoardUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DiscussionBoardUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DiscussionBoardUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DiscussionBoardUpdate) check() error {
	if _u.mutation.CourseCleared() && len(_u.mutation.CourseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DiscussionBoard.course"`)
	}
	return nil
}

func (_u *DiscussionBoardUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(discussionboard.Table, discussionboard.Columns, sqlgraph.NewFieldSpec(discussionboard.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discussionboard.PostsTable,
			Columns: []string{discussionboard.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostsIDs(); len(nodes) > 0 && !_u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discussionboard.PostsTable,
			Columns: []string{discussionboard.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discussionboard.PostsTable,
			Columns: []string{discussionboard.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   discussionboard.CourseTable,
			Columns: []string{discussionboard.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   discussionboard.CourseTable,
			Columns: []string{discussionboard.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discussionboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DiscussionBoardUpdateOne is the builder for updating a single DiscussionBoard entity.
type DiscussionBoardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiscussionBoardMutation
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_u *DiscussionBoardUpdateOne) AddPostIDs(ids ...int) *DiscussionBoardUpdateOne {
	_u.mutation.AddPostIDs(ids...)
	return _u
}

// AddPosts adds the "posts" edges to the Post entity.
func (_u *DiscussionBoardUpdateOne) AddPosts(v ...*Post) *DiscussionBoardUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostIDs(ids...)
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (_u *DiscussionBoardUpdateOne) SetCourseID(id int) *DiscussionBoardUpdateOne {
	_u.mutation.SetCourseID(id)
	return _u
}

// SetCourse sets the "course" edge to the Course entity.
func (_u *DiscussionBoardUpdateOne) SetCourse(v *Course) *DiscussionBoardUpdateOne {
	return _u.SetCourseID(v.ID)
}

// Mutation returns the DiscussionBoardMutation object of the builder.
func (_u *DiscussionBoardUpdateOne) Mutation() *DiscussionBoardMutation {
	return _u.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (_u *DiscussionBoardUpdateOne) ClearPosts() *DiscussionBoardUpdateOne {
	_u.mutation.ClearPosts()
	return _u
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (_u *DiscussionBoardUpdateOne) RemovePostIDs(ids ...int) *DiscussionBoardUpdateOne {
	_u.mutation.RemovePostIDs(ids...)
	return _u
}

// RemovePosts removes "posts" edges to Post entities.
func (_u *DiscussionBoardUpdateOne) RemovePosts(v ...*Post) *DiscussionBoardUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostIDs(ids...)
}

// ClearCourse clears the "course" edge to the Course entity.
func (_u *DiscussionBoardUpdateOne) ClearCourse() *DiscussionBoardUpdateOne {
	_u.mutation.ClearCourse()
	return _u
}

// Where appends a list predicates to the DiscussionBoardUpdate builder.
func (_u *DiscussionBoardUpdateOne) Where(ps ...predicate.DiscussionBoard) *DiscussionBoardUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DiscussionBoardUpdateOne) Select(field string, fields ...string) *DiscussionBoardUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DiscussionBoard entity.
func (_u *DiscussionBoardUpdateOne) Save(ctx context.Context) (*DiscussionBoard, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DiscussionBoardUpdateOne) SaveX(ctx context.Context) *DiscussionBoard {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DiscussionBoardUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DiscussionBoardUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DiscussionBoardUpdateOne) check() error {
	if _u.mutation.CourseCleared() && len(_u.mutation.CourseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DiscussionBoard.course"`)
	}
	return nil
}

func (_u *DiscussionBoardUpdateOne) sqlSave(ctx context.Context) (_node *DiscussionBoard, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(discussionboard.Table, discussionboard.Columns, sqlgraph.NewFieldSpec(discussionboard.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DiscussionBoard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, discussionboard.FieldID)
		for _, f := range fields {
			if !discussionboard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != discussionboard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discussionboard.PostsTable,
			Columns: []string{discussionboard.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostsIDs(); len(nodes) > 0 && !_u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discussionboard.PostsTable,
			Columns: []string{discussionboard.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   discussionboard.PostsTable,
			Columns: []string{discussionboard.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   discussionboard.CourseTable,
			Columns: []string{discussionboard.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   discussionboard.CourseTable,
			Columns: []string{discussionboard.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DiscussionBoard{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{discussionboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
