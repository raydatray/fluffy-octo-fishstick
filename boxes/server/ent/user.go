// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Role holds the value of the "role" field.
	Role user.Role `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// Replies holds the value of the replies edge.
	Replies []*Reply `json:"replies,omitempty"`
	// TeachingSections holds the value of the teaching_sections edge.
	TeachingSections []*CourseSection `json:"teaching_sections,omitempty"`
	// AssistingSections holds the value of the assisting_sections edge.
	AssistingSections []*CourseSection `json:"assisting_sections,omitempty"`
	// EnrolledSections holds the value of the enrolled_sections edge.
	EnrolledSections []*CourseSection `json:"enrolled_sections,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[0] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// RepliesOrErr returns the Replies value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RepliesOrErr() ([]*Reply, error) {
	if e.loadedTypes[1] {
		return e.Replies, nil
	}
	return nil, &NotLoadedError{edge: "replies"}
}

// TeachingSectionsOrErr returns the TeachingSections value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TeachingSectionsOrErr() ([]*CourseSection, error) {
	if e.loadedTypes[2] {
		return e.TeachingSections, nil
	}
	return nil, &NotLoadedError{edge: "teaching_sections"}
}

// AssistingSectionsOrErr returns the AssistingSections value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AssistingSectionsOrErr() ([]*CourseSection, error) {
	if e.loadedTypes[3] {
		return e.AssistingSections, nil
	}
	return nil, &NotLoadedError{edge: "assisting_sections"}
}

// EnrolledSectionsOrErr returns the EnrolledSections value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EnrolledSectionsOrErr() ([]*CourseSection, error) {
	if e.loadedTypes[4] {
		return e.EnrolledSections, nil
	}
	return nil, &NotLoadedError{edge: "enrolled_sections"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldEmail, user.FieldPassword, user.FieldRole:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (_m *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				_m.Password = value.String
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				_m.Role = user.Role(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (_m *User) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPosts queries the "posts" edge of the User entity.
func (_m *User) QueryPosts() *PostQuery {
	return NewUserClient(_m.config).QueryPosts(_m)
}

// QueryReplies queries the "replies" edge of the User entity.
func (_m *User) QueryReplies() *ReplyQuery {
	return NewUserClient(_m.config).QueryReplies(_m)
}

// QueryTeachingSections queries the "teaching_sections" edge of the User entity.
func (_m *User) QueryTeachingSections() *CourseSectionQuery {
	return NewUserClient(_m.config).QueryTeachingSections(_m)
}

// QueryAssistingSections queries the "assisting_sections" edge of the User entity.
func (_m *User) QueryAssistingSections() *CourseSectionQuery {
	return NewUserClient(_m.config).QueryAssistingSections(_m)
}

// QueryEnrolledSections queries the "enrolled_sections" edge of the User entity.
func (_m *User) QueryEnrolledSections() *CourseSectionQuery {
	return NewUserClient(_m.config).QueryEnrolledSections(_m)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *User) Update() *UserUpdateOne {
	return NewUserClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *User) Unwrap() *User {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(_m.Password)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", _m.Role))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
