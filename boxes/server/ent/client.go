// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/course"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/coursesection"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/discussionboard"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/post"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/reply"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Course is the client for interacting with the Course builders.
	Course *CourseClient
	// CourseSection is the client for interacting with the CourseSection builders.
	CourseSection *CourseSectionClient
	// DiscussionBoard is the client for interacting with the DiscussionBoard builders.
	DiscussionBoard *DiscussionBoardClient
	// Post is the client for interacting with the Post builders.
	Post *PostClient
	// Reply is the client for interacting with the Reply builders.
	Reply *ReplyClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Course = NewCourseClient(c.config)
	c.CourseSection = NewCourseSectionClient(c.config)
	c.DiscussionBoard = NewDiscussionBoardClient(c.config)
	c.Post = NewPostClient(c.config)
	c.Reply = NewReplyClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Course:          NewCourseClient(cfg),
		CourseSection:   NewCourseSectionClient(cfg),
		DiscussionBoard: NewDiscussionBoardClient(cfg),
		Post:            NewPostClient(cfg),
		Reply:           NewReplyClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Course:          NewCourseClient(cfg),
		CourseSection:   NewCourseSectionClient(cfg),
		DiscussionBoard: NewDiscussionBoardClient(cfg),
		Post:            NewPostClient(cfg),
		Reply:           NewReplyClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Course.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Course, c.CourseSection, c.DiscussionBoard, c.Post, c.Reply, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Course, c.CourseSection, c.DiscussionBoard, c.Post, c.Reply, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CourseMutation:
		return c.Course.mutate(ctx, m)
	case *CourseSectionMutation:
		return c.CourseSection.mutate(ctx, m)
	case *DiscussionBoardMutation:
		return c.DiscussionBoard.mutate(ctx, m)
	case *PostMutation:
		return c.Post.mutate(ctx, m)
	case *ReplyMutation:
		return c.Reply.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CourseClient is a client for the Course schema.
type CourseClient struct {
	config
}

// NewCourseClient returns a client for the Course from the given config.
func NewCourseClient(c config) *CourseClient {
	return &CourseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `course.Hooks(f(g(h())))`.
func (c *CourseClient) Use(hooks ...Hook) {
	c.hooks.Course = append(c.hooks.Course, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `course.Intercept(f(g(h())))`.
func (c *CourseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Course = append(c.inters.Course, interceptors...)
}

// Create returns a builder for creating a Course entity.
func (c *CourseClient) Create() *CourseCreate {
	mutation := newCourseMutation(c.config, OpCreate)
	return &CourseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Course entities.
func (c *CourseClient) CreateBulk(builders ...*CourseCreate) *CourseCreateBulk {
	return &CourseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CourseClient) MapCreateBulk(slice any, setFunc func(*CourseCreate, int)) *CourseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CourseCreateBulk{err: fmt.Errorf("calling to CourseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CourseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CourseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Course.
func (c *CourseClient) Update() *CourseUpdate {
	mutation := newCourseMutation(c.config, OpUpdate)
	return &CourseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CourseClient) UpdateOne(_m *Course) *CourseUpdateOne {
	mutation := newCourseMutation(c.config, OpUpdateOne, withCourse(_m))
	return &CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CourseClient) UpdateOneID(id int) *CourseUpdateOne {
	mutation := newCourseMutation(c.config, OpUpdateOne, withCourseID(id))
	return &CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Course.
func (c *CourseClient) Delete() *CourseDelete {
	mutation := newCourseMutation(c.config, OpDelete)
	return &CourseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CourseClient) DeleteOne(_m *Course) *CourseDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CourseClient) DeleteOneID(id int) *CourseDeleteOne {
	builder := c.Delete().Where(course.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CourseDeleteOne{builder}
}

// Query returns a query builder for Course.
func (c *CourseClient) Query() *CourseQuery {
	return &CourseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCourse},
		inters: c.Interceptors(),
	}
}

// Get returns a Course entity by its id.
func (c *CourseClient) Get(ctx context.Context, id int) (*Course, error) {
	return c.Query().Where(course.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CourseClient) GetX(ctx context.Context, id int) *Course {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDiscussionBoard queries the discussion_board edge of a Course.
func (c *CourseClient) QueryDiscussionBoard(_m *Course) *DiscussionBoardQuery {
	query := (&DiscussionBoardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(discussionboard.Table, discussionboard.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, course.DiscussionBoardTable, course.DiscussionBoardColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySections queries the sections edge of a Course.
func (c *CourseClient) QuerySections(_m *Course) *CourseSectionQuery {
	query := (&CourseSectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(coursesection.Table, coursesection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, course.SectionsTable, course.SectionsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CourseClient) Hooks() []Hook {
	return c.hooks.Course
}

// Interceptors returns the client interceptors.
func (c *CourseClient) Interceptors() []Interceptor {
	return c.inters.Course
}

func (c *CourseClient) mutate(ctx context.Context, m *CourseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CourseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CourseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CourseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Course mutation op: %q", m.Op())
	}
}

// CourseSectionClient is a client for the CourseSection schema.
type CourseSectionClient struct {
	config
}

// NewCourseSectionClient returns a client for the CourseSection from the given config.
func NewCourseSectionClient(c config) *CourseSectionClient {
	return &CourseSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coursesection.Hooks(f(g(h())))`.
func (c *CourseSectionClient) Use(hooks ...Hook) {
	c.hooks.CourseSection = append(c.hooks.CourseSection, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coursesection.Intercept(f(g(h())))`.
func (c *CourseSectionClient) Intercept(interceptors ...Interceptor) {
	c.inters.CourseSection = append(c.inters.CourseSection, interceptors...)
}

// Create returns a builder for creating a CourseSection entity.
func (c *CourseSectionClient) Create() *CourseSectionCreate {
	mutation := newCourseSectionMutation(c.config, OpCreate)
	return &CourseSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CourseSection entities.
func (c *CourseSectionClient) CreateBulk(builders ...*CourseSectionCreate) *CourseSectionCreateBulk {
	return &CourseSectionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CourseSectionClient) MapCreateBulk(slice any, setFunc func(*CourseSectionCreate, int)) *CourseSectionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CourseSectionCreateBulk{err: fmt.Errorf("calling to CourseSectionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CourseSectionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CourseSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CourseSection.
func (c *CourseSectionClient) Update() *CourseSectionUpdate {
	mutation := newCourseSectionMutation(c.config, OpUpdate)
	return &CourseSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CourseSectionClient) UpdateOne(_m *CourseSection) *CourseSectionUpdateOne {
	mutation := newCourseSectionMutation(c.config, OpUpdateOne, withCourseSection(_m))
	return &CourseSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CourseSectionClient) UpdateOneID(id int) *CourseSectionUpdateOne {
	mutation := newCourseSectionMutation(c.config, OpUpdateOne, withCourseSectionID(id))
	return &CourseSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CourseSection.
func (c *CourseSectionClient) Delete() *CourseSectionDelete {
	mutation := newCourseSectionMutation(c.config, OpDelete)
	return &CourseSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CourseSectionClient) DeleteOne(_m *CourseSection) *CourseSectionDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CourseSectionClient) DeleteOneID(id int) *CourseSectionDeleteOne {
	builder := c.Delete().Where(coursesection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CourseSectionDeleteOne{builder}
}

// Query returns a query builder for CourseSection.
func (c *CourseSectionClient) Query() *CourseSectionQuery {
	return &CourseSectionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCourseSection},
		inters: c.Interceptors(),
	}
}

// Get returns a CourseSection entity by its id.
func (c *CourseSectionClient) Get(ctx context.Context, id int) (*CourseSection, error) {
	return c.Query().Where(coursesection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CourseSectionClient) GetX(ctx context.Context, id int) *CourseSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCourse queries the course edge of a CourseSection.
func (c *CourseSectionClient) QueryCourse(_m *CourseSection) *CourseQuery {
	query := (&CourseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coursesection.Table, coursesection.FieldID, id),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coursesection.CourseTable, coursesection.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProfessors queries the professors edge of a CourseSection.
func (c *CourseSectionClient) QueryProfessors(_m *CourseSection) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coursesection.Table, coursesection.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, coursesection.ProfessorsTable, coursesection.ProfessorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeachingAssistants queries the teaching_assistants edge of a CourseSection.
func (c *CourseSectionClient) QueryTeachingAssistants(_m *CourseSection) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coursesection.Table, coursesection.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, coursesection.TeachingAssistantsTable, coursesection.TeachingAssistantsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseAssistants queries the course_assistants edge of a CourseSection.
func (c *CourseSectionClient) QueryCourseAssistants(_m *CourseSection) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coursesection.Table, coursesection.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, coursesection.CourseAssistantsTable, coursesection.CourseAssistantsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStudents queries the students edge of a CourseSection.
func (c *CourseSectionClient) QueryStudents(_m *CourseSection) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coursesection.Table, coursesection.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, coursesection.StudentsTable, coursesection.StudentsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CourseSectionClient) Hooks() []Hook {
	return c.hooks.CourseSection
}

// Interceptors returns the client interceptors.
func (c *CourseSectionClient) Interceptors() []Interceptor {
	return c.inters.CourseSection
}

func (c *CourseSectionClient) mutate(ctx context.Context, m *CourseSectionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CourseSectionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CourseSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CourseSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CourseSectionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CourseSection mutation op: %q", m.Op())
	}
}

// DiscussionBoardClient is a client for the DiscussionBoard schema.
type DiscussionBoardClient struct {
	config
}

// NewDiscussionBoardClient returns a client for the DiscussionBoard from the given config.
func NewDiscussionBoardClient(c config) *DiscussionBoardClient {
	return &DiscussionBoardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `discussionboard.Hooks(f(g(h())))`.
func (c *DiscussionBoardClient) Use(hooks ...Hook) {
	c.hooks.DiscussionBoard = append(c.hooks.DiscussionBoard, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `discussionboard.Intercept(f(g(h())))`.
func (c *DiscussionBoardClient) Intercept(interceptors ...Interceptor) {
	c.inters.DiscussionBoard = append(c.inters.DiscussionBoard, interceptors...)
}

// Create returns a builder for creating a DiscussionBoard entity.
func (c *DiscussionBoardClient) Create() *DiscussionBoardCreate {
	mutation := newDiscussionBoardMutation(c.config, OpCreate)
	return &DiscussionBoardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DiscussionBoard entities.
func (c *DiscussionBoardClient) CreateBulk(builders ...*DiscussionBoardCreate) *DiscussionBoardCreateBulk {
	return &DiscussionBoardCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DiscussionBoardClient) MapCreateBulk(slice any, setFunc func(*DiscussionBoardCreate, int)) *DiscussionBoardCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DiscussionBoardCreateBulk{err: fmt.Errorf("calling to DiscussionBoardClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DiscussionBoardCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DiscussionBoardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DiscussionBoard.
func (c *DiscussionBoardClient) Update() *DiscussionBoardUpdate {
	mutation := newDiscussionBoardMutation(c.config, OpUpdate)
	return &DiscussionBoardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiscussionBoardClient) UpdateOne(_m *DiscussionBoard) *DiscussionBoardUpdateOne {
	mutation := newDiscussionBoardMutation(c.config, OpUpdateOne, withDiscussionBoard(_m))
	return &DiscussionBoardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiscussionBoardClient) UpdateOneID(id int) *DiscussionBoardUpdateOne {
	mutation := newDiscussionBoardMutation(c.config, OpUpdateOne, withDiscussionBoardID(id))
	return &DiscussionBoardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DiscussionBoard.
func (c *DiscussionBoardClient) Delete() *DiscussionBoardDelete {
	mutation := newDiscussionBoardMutation(c.config, OpDelete)
	return &DiscussionBoardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DiscussionBoardClient) DeleteOne(_m *DiscussionBoard) *DiscussionBoardDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DiscussionBoardClient) DeleteOneID(id int) *DiscussionBoardDeleteOne {
	builder := c.Delete().Where(discussionboard.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiscussionBoardDeleteOne{builder}
}

// Query returns a query builder for DiscussionBoard.
func (c *DiscussionBoardClient) Query() *DiscussionBoardQuery {
	return &DiscussionBoardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDiscussionBoard},
		inters: c.Interceptors(),
	}
}

// Get returns a DiscussionBoard entity by its id.
func (c *DiscussionBoardClient) Get(ctx context.Context, id int) (*DiscussionBoard, error) {
	return c.Query().Where(discussionboard.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiscussionBoardClient) GetX(ctx context.Context, id int) *DiscussionBoard {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPosts queries the posts edge of a DiscussionBoard.
func (c *DiscussionBoardClient) QueryPosts(_m *DiscussionBoard) *PostQuery {
	query := (&PostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discussionboard.Table, discussionboard.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, discussionboard.PostsTable, discussionboard.PostsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a DiscussionBoard.
func (c *DiscussionBoardClient) QueryCourse(_m *DiscussionBoard) *CourseQuery {
	query := (&CourseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(discussionboard.Table, discussionboard.FieldID, id),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, discussionboard.CourseTable, discussionboard.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiscussionBoardClient) Hooks() []Hook {
	return c.hooks.DiscussionBoard
}

// Interceptors returns the client interceptors.
func (c *DiscussionBoardClient) Interceptors() []Interceptor {
	return c.inters.DiscussionBoard
}

func (c *DiscussionBoardClient) mutate(ctx context.Context, m *DiscussionBoardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DiscussionBoardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DiscussionBoardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DiscussionBoardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DiscussionBoardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DiscussionBoard mutation op: %q", m.Op())
	}
}

// PostClient is a client for the Post schema.
type PostClient struct {
	config
}

// NewPostClient returns a client for the Post from the given config.
func NewPostClient(c config) *PostClient {
	return &PostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `post.Hooks(f(g(h())))`.
func (c *PostClient) Use(hooks ...Hook) {
	c.hooks.Post = append(c.hooks.Post, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `post.Intercept(f(g(h())))`.
func (c *PostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Post = append(c.inters.Post, interceptors...)
}

// Create returns a builder for creating a Post entity.
func (c *PostClient) Create() *PostCreate {
	mutation := newPostMutation(c.config, OpCreate)
	return &PostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Post entities.
func (c *PostClient) CreateBulk(builders ...*PostCreate) *PostCreateBulk {
	return &PostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PostClient) MapCreateBulk(slice any, setFunc func(*PostCreate, int)) *PostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PostCreateBulk{err: fmt.Errorf("calling to PostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Post.
func (c *PostClient) Update() *PostUpdate {
	mutation := newPostMutation(c.config, OpUpdate)
	return &PostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostClient) UpdateOne(_m *Post) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPost(_m))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostClient) UpdateOneID(id int) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPostID(id))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Post.
func (c *PostClient) Delete() *PostDelete {
	mutation := newPostMutation(c.config, OpDelete)
	return &PostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PostClient) DeleteOne(_m *Post) *PostDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PostClient) DeleteOneID(id int) *PostDeleteOne {
	builder := c.Delete().Where(post.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostDeleteOne{builder}
}

// Query returns a query builder for Post.
func (c *PostClient) Query() *PostQuery {
	return &PostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePost},
		inters: c.Interceptors(),
	}
}

// Get returns a Post entity by its id.
func (c *PostClient) Get(ctx context.Context, id int) (*Post, error) {
	return c.Query().Where(post.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostClient) GetX(ctx context.Context, id int) *Post {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a Post.
func (c *PostClient) QueryAuthor(_m *Post) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, post.AuthorTable, post.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBoard queries the board edge of a Post.
func (c *PostClient) QueryBoard(_m *Post) *DiscussionBoardQuery {
	query := (&DiscussionBoardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(discussionboard.Table, discussionboard.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, post.BoardTable, post.BoardColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReplies queries the replies edge of a Post.
func (c *PostClient) QueryReplies(_m *Post) *ReplyQuery {
	query := (&ReplyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(reply.Table, reply.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, post.RepliesTable, post.RepliesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostClient) Hooks() []Hook {
	return c.hooks.Post
}

// Interceptors returns the client interceptors.
func (c *PostClient) Interceptors() []Interceptor {
	return c.inters.Post
}

func (c *PostClient) mutate(ctx context.Context, m *PostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Post mutation op: %q", m.Op())
	}
}

// ReplyClient is a client for the Reply schema.
type ReplyClient struct {
	config
}

// NewReplyClient returns a client for the Reply from the given config.
func NewReplyClient(c config) *ReplyClient {
	return &ReplyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reply.Hooks(f(g(h())))`.
func (c *ReplyClient) Use(hooks ...Hook) {
	c.hooks.Reply = append(c.hooks.Reply, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `reply.Intercept(f(g(h())))`.
func (c *ReplyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Reply = append(c.inters.Reply, interceptors...)
}

// Create returns a builder for creating a Reply entity.
func (c *ReplyClient) Create() *ReplyCreate {
	mutation := newReplyMutation(c.config, OpCreate)
	return &ReplyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reply entities.
func (c *ReplyClient) CreateBulk(builders ...*ReplyCreate) *ReplyCreateBulk {
	return &ReplyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReplyClient) MapCreateBulk(slice any, setFunc func(*ReplyCreate, int)) *ReplyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReplyCreateBulk{err: fmt.Errorf("calling to ReplyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReplyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReplyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reply.
func (c *ReplyClient) Update() *ReplyUpdate {
	mutation := newReplyMutation(c.config, OpUpdate)
	return &ReplyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReplyClient) UpdateOne(_m *Reply) *ReplyUpdateOne {
	mutation := newReplyMutation(c.config, OpUpdateOne, withReply(_m))
	return &ReplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReplyClient) UpdateOneID(id int) *ReplyUpdateOne {
	mutation := newReplyMutation(c.config, OpUpdateOne, withReplyID(id))
	return &ReplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reply.
func (c *ReplyClient) Delete() *ReplyDelete {
	mutation := newReplyMutation(c.config, OpDelete)
	return &ReplyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReplyClient) DeleteOne(_m *Reply) *ReplyDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReplyClient) DeleteOneID(id int) *ReplyDeleteOne {
	builder := c.Delete().Where(reply.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReplyDeleteOne{builder}
}

// Query returns a query builder for Reply.
func (c *ReplyClient) Query() *ReplyQuery {
	return &ReplyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReply},
		inters: c.Interceptors(),
	}
}

// Get returns a Reply entity by its id.
func (c *ReplyClient) Get(ctx context.Context, id int) (*Reply, error) {
	return c.Query().Where(reply.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReplyClient) GetX(ctx context.Context, id int) *Reply {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a Reply.
func (c *ReplyClient) QueryAuthor(_m *Reply) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reply.Table, reply.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reply.AuthorTable, reply.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPost queries the post edge of a Reply.
func (c *ReplyClient) QueryPost(_m *Reply) *PostQuery {
	query := (&PostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reply.Table, reply.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reply.PostTable, reply.PostColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReplyClient) Hooks() []Hook {
	return c.hooks.Reply
}

// Interceptors returns the client interceptors.
func (c *ReplyClient) Interceptors() []Interceptor {
	return c.inters.Reply
}

func (c *ReplyClient) mutate(ctx context.Context, m *ReplyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReplyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReplyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReplyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Reply mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(_m *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(_m))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(_m *User) *UserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPosts queries the posts edge of a User.
func (c *UserClient) QueryPosts(_m *User) *PostQuery {
	query := (&PostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PostsTable, user.PostsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReplies queries the replies edge of a User.
func (c *UserClient) QueryReplies(_m *User) *ReplyQuery {
	query := (&ReplyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(reply.Table, reply.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RepliesTable, user.RepliesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeachingSections queries the teaching_sections edge of a User.
func (c *UserClient) QueryTeachingSections(_m *User) *CourseSectionQuery {
	query := (&CourseSectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(coursesection.Table, coursesection.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.TeachingSectionsTable, user.TeachingSectionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeachingAssistantSections queries the teaching_assistant_sections edge of a User.
func (c *UserClient) QueryTeachingAssistantSections(_m *User) *CourseSectionQuery {
	query := (&CourseSectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(coursesection.Table, coursesection.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.TeachingAssistantSectionsTable, user.TeachingAssistantSectionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourseAssistantSections queries the course_assistant_sections edge of a User.
func (c *UserClient) QueryCourseAssistantSections(_m *User) *CourseSectionQuery {
	query := (&CourseSectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(coursesection.Table, coursesection.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.CourseAssistantSectionsTable, user.CourseAssistantSectionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnrolledSections queries the enrolled_sections edge of a User.
func (c *UserClient) QueryEnrolledSections(_m *User) *CourseSectionQuery {
	query := (&CourseSectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(coursesection.Table, coursesection.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.EnrolledSectionsTable, user.EnrolledSectionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Course, CourseSection, DiscussionBoard, Post, Reply, User []ent.Hook
	}
	inters struct {
		Course, CourseSection, DiscussionBoard, Post, Reply, User []ent.Interceptor
	}
)
