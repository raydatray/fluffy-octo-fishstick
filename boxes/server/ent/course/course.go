// Code generated by ent, DO NOT EDIT.

package course

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the course type in the database.
	Label = "course"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// EdgeDiscussionBoard holds the string denoting the discussion_board edge name in mutations.
	EdgeDiscussionBoard = "discussion_board"
	// EdgeSections holds the string denoting the sections edge name in mutations.
	EdgeSections = "sections"
	// Table holds the table name of the course in the database.
	Table = "courses"
	// DiscussionBoardTable is the table that holds the discussion_board relation/edge.
	DiscussionBoardTable = "discussion_boards"
	// DiscussionBoardInverseTable is the table name for the DiscussionBoard entity.
	// It exists in this package in order to avoid circular dependency with the "discussionboard" package.
	DiscussionBoardInverseTable = "discussion_boards"
	// DiscussionBoardColumn is the table column denoting the discussion_board relation/edge.
	DiscussionBoardColumn = "course_discussion_board"
	// SectionsTable is the table that holds the sections relation/edge.
	SectionsTable = "course_sections"
	// SectionsInverseTable is the table name for the CourseSection entity.
	// It exists in this package in order to avoid circular dependency with the "coursesection" package.
	SectionsInverseTable = "course_sections"
	// SectionsColumn is the table column denoting the sections relation/edge.
	SectionsColumn = "course_sections"
)

// Columns holds all SQL columns for course fields.
var Columns = []string{
	FieldID,
	FieldCode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Course queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByDiscussionBoardField orders the results by discussion_board field.
func ByDiscussionBoardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDiscussionBoardStep(), sql.OrderByField(field, opts...))
	}
}

// BySectionsCount orders the results by sections count.
func BySectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSectionsStep(), opts...)
	}
}

// BySections orders the results by sections terms.
func BySections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDiscussionBoardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DiscussionBoardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DiscussionBoardTable, DiscussionBoardColumn),
	)
}
func newSectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SectionsTable, SectionsColumn),
	)
}
