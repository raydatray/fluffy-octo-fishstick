// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/course"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/coursesection"
)

// CourseSection is the model entity for the CourseSection schema.
type CourseSection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CourseSectionQuery when eager-loading is set.
	Edges           CourseSectionEdges `json:"edges"`
	course_sections *int
	selectValues    sql.SelectValues
}

// CourseSectionEdges holds the relations/edges for other nodes in the graph.
type CourseSectionEdges struct {
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// Professors holds the value of the professors edge.
	Professors []*User `json:"professors,omitempty"`
	// TeachingAssistants holds the value of the teaching_assistants edge.
	TeachingAssistants []*User `json:"teaching_assistants,omitempty"`
	// Students holds the value of the students edge.
	Students []*User `json:"students,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseSectionEdges) CourseOrErr() (*Course, error) {
	if e.Course != nil {
		return e.Course, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: course.Label}
	}
	return nil, &NotLoadedError{edge: "course"}
}

// ProfessorsOrErr returns the Professors value or an error if the edge
// was not loaded in eager-loading.
func (e CourseSectionEdges) ProfessorsOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Professors, nil
	}
	return nil, &NotLoadedError{edge: "professors"}
}

// TeachingAssistantsOrErr returns the TeachingAssistants value or an error if the edge
// was not loaded in eager-loading.
func (e CourseSectionEdges) TeachingAssistantsOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.TeachingAssistants, nil
	}
	return nil, &NotLoadedError{edge: "teaching_assistants"}
}

// StudentsOrErr returns the Students value or an error if the edge
// was not loaded in eager-loading.
func (e CourseSectionEdges) StudentsOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.Students, nil
	}
	return nil, &NotLoadedError{edge: "students"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CourseSection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case coursesection.FieldID, coursesection.FieldNumber:
			values[i] = new(sql.NullInt64)
		case coursesection.ForeignKeys[0]: // course_sections
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CourseSection fields.
func (_m *CourseSection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coursesection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case coursesection.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				_m.Number = int(value.Int64)
			}
		case coursesection.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field course_sections", value)
			} else if value.Valid {
				_m.course_sections = new(int)
				*_m.course_sections = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CourseSection.
// This includes values selected through modifiers, order, etc.
func (_m *CourseSection) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCourse queries the "course" edge of the CourseSection entity.
func (_m *CourseSection) QueryCourse() *CourseQuery {
	return NewCourseSectionClient(_m.config).QueryCourse(_m)
}

// QueryProfessors queries the "professors" edge of the CourseSection entity.
func (_m *CourseSection) QueryProfessors() *UserQuery {
	return NewCourseSectionClient(_m.config).QueryProfessors(_m)
}

// QueryTeachingAssistants queries the "teaching_assistants" edge of the CourseSection entity.
func (_m *CourseSection) QueryTeachingAssistants() *UserQuery {
	return NewCourseSectionClient(_m.config).QueryTeachingAssistants(_m)
}

// QueryStudents queries the "students" edge of the CourseSection entity.
func (_m *CourseSection) QueryStudents() *UserQuery {
	return NewCourseSectionClient(_m.config).QueryStudents(_m)
}

// Update returns a builder for updating this CourseSection.
// Note that you need to call CourseSection.Unwrap() before calling this method if this CourseSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *CourseSection) Update() *CourseSectionUpdateOne {
	return NewCourseSectionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the CourseSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *CourseSection) Unwrap() *CourseSection {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: CourseSection is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *CourseSection) String() string {
	var builder strings.Builder
	builder.WriteString("CourseSection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", _m.Number))
	builder.WriteByte(')')
	return builder.String()
}

// CourseSections is a parsable slice of CourseSection.
type CourseSections []*CourseSection
