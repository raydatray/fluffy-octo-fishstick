// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/course"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/coursesection"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/discussionboard"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/post"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/reply"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/user"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// CourseEdge is the edge representation of Course.
type CourseEdge struct {
	Node   *Course `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// CourseConnection is the connection containing edges to Course.
type CourseConnection struct {
	Edges      []*CourseEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *CourseConnection) build(nodes []*Course, pager *coursePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Course
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Course {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Course {
			return nodes[i]
		}
	}
	c.Edges = make([]*CourseEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CourseEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CoursePaginateOption enables pagination customization.
type CoursePaginateOption func(*coursePager) error

// WithCourseOrder configures pagination ordering.
func WithCourseOrder(order *CourseOrder) CoursePaginateOption {
	if order == nil {
		order = DefaultCourseOrder
	}
	o := *order
	return func(pager *coursePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCourseOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCourseFilter configures pagination filter.
func WithCourseFilter(filter func(*CourseQuery) (*CourseQuery, error)) CoursePaginateOption {
	return func(pager *coursePager) error {
		if filter == nil {
			return errors.New("CourseQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type coursePager struct {
	reverse bool
	order   *CourseOrder
	filter  func(*CourseQuery) (*CourseQuery, error)
}

func newCoursePager(opts []CoursePaginateOption, reverse bool) (*coursePager, error) {
	pager := &coursePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCourseOrder
	}
	return pager, nil
}

func (p *coursePager) applyFilter(query *CourseQuery) (*CourseQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *coursePager) toCursor(_m *Course) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *coursePager) applyCursors(query *CourseQuery, after, before *Cursor) (*CourseQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCourseOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *coursePager) applyOrder(query *CourseQuery) *CourseQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCourseOrder.Field {
		query = query.Order(DefaultCourseOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *coursePager) orderExpr(query *CourseQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCourseOrder.Field {
			b.Comma().Ident(DefaultCourseOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Course.
func (_m *CourseQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CoursePaginateOption,
) (*CourseConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCoursePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &CourseConnection{Edges: []*CourseEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CourseOrderField defines the ordering field of Course.
type CourseOrderField struct {
	// Value extracts the ordering value from the given Course.
	Value    func(*Course) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) course.OrderOption
	toCursor func(*Course) Cursor
}

// CourseOrder defines the ordering of Course.
type CourseOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *CourseOrderField `json:"field"`
}

// DefaultCourseOrder is the default ordering of Course.
var DefaultCourseOrder = &CourseOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CourseOrderField{
		Value: func(_m *Course) (ent.Value, error) {
			return _m.ID, nil
		},
		column: course.FieldID,
		toTerm: course.ByID,
		toCursor: func(_m *Course) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Course into CourseEdge.
func (_m *Course) ToEdge(order *CourseOrder) *CourseEdge {
	if order == nil {
		order = DefaultCourseOrder
	}
	return &CourseEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// CourseSectionEdge is the edge representation of CourseSection.
type CourseSectionEdge struct {
	Node   *CourseSection `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// CourseSectionConnection is the connection containing edges to CourseSection.
type CourseSectionConnection struct {
	Edges      []*CourseSectionEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *CourseSectionConnection) build(nodes []*CourseSection, pager *coursesectionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CourseSection
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CourseSection {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CourseSection {
			return nodes[i]
		}
	}
	c.Edges = make([]*CourseSectionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CourseSectionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CourseSectionPaginateOption enables pagination customization.
type CourseSectionPaginateOption func(*coursesectionPager) error

// WithCourseSectionOrder configures pagination ordering.
func WithCourseSectionOrder(order *CourseSectionOrder) CourseSectionPaginateOption {
	if order == nil {
		order = DefaultCourseSectionOrder
	}
	o := *order
	return func(pager *coursesectionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCourseSectionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCourseSectionFilter configures pagination filter.
func WithCourseSectionFilter(filter func(*CourseSectionQuery) (*CourseSectionQuery, error)) CourseSectionPaginateOption {
	return func(pager *coursesectionPager) error {
		if filter == nil {
			return errors.New("CourseSectionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type coursesectionPager struct {
	reverse bool
	order   *CourseSectionOrder
	filter  func(*CourseSectionQuery) (*CourseSectionQuery, error)
}

func newCourseSectionPager(opts []CourseSectionPaginateOption, reverse bool) (*coursesectionPager, error) {
	pager := &coursesectionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCourseSectionOrder
	}
	return pager, nil
}

func (p *coursesectionPager) applyFilter(query *CourseSectionQuery) (*CourseSectionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *coursesectionPager) toCursor(_m *CourseSection) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *coursesectionPager) applyCursors(query *CourseSectionQuery, after, before *Cursor) (*CourseSectionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCourseSectionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *coursesectionPager) applyOrder(query *CourseSectionQuery) *CourseSectionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCourseSectionOrder.Field {
		query = query.Order(DefaultCourseSectionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *coursesectionPager) orderExpr(query *CourseSectionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCourseSectionOrder.Field {
			b.Comma().Ident(DefaultCourseSectionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CourseSection.
func (_m *CourseSectionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CourseSectionPaginateOption,
) (*CourseSectionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCourseSectionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &CourseSectionConnection{Edges: []*CourseSectionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CourseSectionOrderField defines the ordering field of CourseSection.
type CourseSectionOrderField struct {
	// Value extracts the ordering value from the given CourseSection.
	Value    func(*CourseSection) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) coursesection.OrderOption
	toCursor func(*CourseSection) Cursor
}

// CourseSectionOrder defines the ordering of CourseSection.
type CourseSectionOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *CourseSectionOrderField `json:"field"`
}

// DefaultCourseSectionOrder is the default ordering of CourseSection.
var DefaultCourseSectionOrder = &CourseSectionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CourseSectionOrderField{
		Value: func(_m *CourseSection) (ent.Value, error) {
			return _m.ID, nil
		},
		column: coursesection.FieldID,
		toTerm: coursesection.ByID,
		toCursor: func(_m *CourseSection) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts CourseSection into CourseSectionEdge.
func (_m *CourseSection) ToEdge(order *CourseSectionOrder) *CourseSectionEdge {
	if order == nil {
		order = DefaultCourseSectionOrder
	}
	return &CourseSectionEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// DiscussionBoardEdge is the edge representation of DiscussionBoard.
type DiscussionBoardEdge struct {
	Node   *DiscussionBoard `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// DiscussionBoardConnection is the connection containing edges to DiscussionBoard.
type DiscussionBoardConnection struct {
	Edges      []*DiscussionBoardEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *DiscussionBoardConnection) build(nodes []*DiscussionBoard, pager *discussionboardPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *DiscussionBoard
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DiscussionBoard {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DiscussionBoard {
			return nodes[i]
		}
	}
	c.Edges = make([]*DiscussionBoardEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DiscussionBoardEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DiscussionBoardPaginateOption enables pagination customization.
type DiscussionBoardPaginateOption func(*discussionboardPager) error

// WithDiscussionBoardOrder configures pagination ordering.
func WithDiscussionBoardOrder(order *DiscussionBoardOrder) DiscussionBoardPaginateOption {
	if order == nil {
		order = DefaultDiscussionBoardOrder
	}
	o := *order
	return func(pager *discussionboardPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDiscussionBoardOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDiscussionBoardFilter configures pagination filter.
func WithDiscussionBoardFilter(filter func(*DiscussionBoardQuery) (*DiscussionBoardQuery, error)) DiscussionBoardPaginateOption {
	return func(pager *discussionboardPager) error {
		if filter == nil {
			return errors.New("DiscussionBoardQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type discussionboardPager struct {
	reverse bool
	order   *DiscussionBoardOrder
	filter  func(*DiscussionBoardQuery) (*DiscussionBoardQuery, error)
}

func newDiscussionBoardPager(opts []DiscussionBoardPaginateOption, reverse bool) (*discussionboardPager, error) {
	pager := &discussionboardPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDiscussionBoardOrder
	}
	return pager, nil
}

func (p *discussionboardPager) applyFilter(query *DiscussionBoardQuery) (*DiscussionBoardQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *discussionboardPager) toCursor(_m *DiscussionBoard) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *discussionboardPager) applyCursors(query *DiscussionBoardQuery, after, before *Cursor) (*DiscussionBoardQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultDiscussionBoardOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *discussionboardPager) applyOrder(query *DiscussionBoardQuery) *DiscussionBoardQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultDiscussionBoardOrder.Field {
		query = query.Order(DefaultDiscussionBoardOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *discussionboardPager) orderExpr(query *DiscussionBoardQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDiscussionBoardOrder.Field {
			b.Comma().Ident(DefaultDiscussionBoardOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to DiscussionBoard.
func (_m *DiscussionBoardQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DiscussionBoardPaginateOption,
) (*DiscussionBoardConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDiscussionBoardPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &DiscussionBoardConnection{Edges: []*DiscussionBoardEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// DiscussionBoardOrderField defines the ordering field of DiscussionBoard.
type DiscussionBoardOrderField struct {
	// Value extracts the ordering value from the given DiscussionBoard.
	Value    func(*DiscussionBoard) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) discussionboard.OrderOption
	toCursor func(*DiscussionBoard) Cursor
}

// DiscussionBoardOrder defines the ordering of DiscussionBoard.
type DiscussionBoardOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *DiscussionBoardOrderField `json:"field"`
}

// DefaultDiscussionBoardOrder is the default ordering of DiscussionBoard.
var DefaultDiscussionBoardOrder = &DiscussionBoardOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DiscussionBoardOrderField{
		Value: func(_m *DiscussionBoard) (ent.Value, error) {
			return _m.ID, nil
		},
		column: discussionboard.FieldID,
		toTerm: discussionboard.ByID,
		toCursor: func(_m *DiscussionBoard) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts DiscussionBoard into DiscussionBoardEdge.
func (_m *DiscussionBoard) ToEdge(order *DiscussionBoardOrder) *DiscussionBoardEdge {
	if order == nil {
		order = DefaultDiscussionBoardOrder
	}
	return &DiscussionBoardEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// PostEdge is the edge representation of Post.
type PostEdge struct {
	Node   *Post  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// PostConnection is the connection containing edges to Post.
type PostConnection struct {
	Edges      []*PostEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *PostConnection) build(nodes []*Post, pager *postPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Post
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Post {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Post {
			return nodes[i]
		}
	}
	c.Edges = make([]*PostEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PostEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PostPaginateOption enables pagination customization.
type PostPaginateOption func(*postPager) error

// WithPostOrder configures pagination ordering.
func WithPostOrder(order *PostOrder) PostPaginateOption {
	if order == nil {
		order = DefaultPostOrder
	}
	o := *order
	return func(pager *postPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPostOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPostFilter configures pagination filter.
func WithPostFilter(filter func(*PostQuery) (*PostQuery, error)) PostPaginateOption {
	return func(pager *postPager) error {
		if filter == nil {
			return errors.New("PostQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type postPager struct {
	reverse bool
	order   *PostOrder
	filter  func(*PostQuery) (*PostQuery, error)
}

func newPostPager(opts []PostPaginateOption, reverse bool) (*postPager, error) {
	pager := &postPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPostOrder
	}
	return pager, nil
}

func (p *postPager) applyFilter(query *PostQuery) (*PostQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *postPager) toCursor(_m *Post) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *postPager) applyCursors(query *PostQuery, after, before *Cursor) (*PostQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPostOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *postPager) applyOrder(query *PostQuery) *PostQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPostOrder.Field {
		query = query.Order(DefaultPostOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *postPager) orderExpr(query *PostQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPostOrder.Field {
			b.Comma().Ident(DefaultPostOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Post.
func (_m *PostQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PostPaginateOption,
) (*PostConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPostPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &PostConnection{Edges: []*PostEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PostOrderField defines the ordering field of Post.
type PostOrderField struct {
	// Value extracts the ordering value from the given Post.
	Value    func(*Post) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) post.OrderOption
	toCursor func(*Post) Cursor
}

// PostOrder defines the ordering of Post.
type PostOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *PostOrderField `json:"field"`
}

// DefaultPostOrder is the default ordering of Post.
var DefaultPostOrder = &PostOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PostOrderField{
		Value: func(_m *Post) (ent.Value, error) {
			return _m.ID, nil
		},
		column: post.FieldID,
		toTerm: post.ByID,
		toCursor: func(_m *Post) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Post into PostEdge.
func (_m *Post) ToEdge(order *PostOrder) *PostEdge {
	if order == nil {
		order = DefaultPostOrder
	}
	return &PostEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// ReplyEdge is the edge representation of Reply.
type ReplyEdge struct {
	Node   *Reply `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ReplyConnection is the connection containing edges to Reply.
type ReplyConnection struct {
	Edges      []*ReplyEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *ReplyConnection) build(nodes []*Reply, pager *replyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Reply
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Reply {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Reply {
			return nodes[i]
		}
	}
	c.Edges = make([]*ReplyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ReplyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ReplyPaginateOption enables pagination customization.
type ReplyPaginateOption func(*replyPager) error

// WithReplyOrder configures pagination ordering.
func WithReplyOrder(order *ReplyOrder) ReplyPaginateOption {
	if order == nil {
		order = DefaultReplyOrder
	}
	o := *order
	return func(pager *replyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultReplyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithReplyFilter configures pagination filter.
func WithReplyFilter(filter func(*ReplyQuery) (*ReplyQuery, error)) ReplyPaginateOption {
	return func(pager *replyPager) error {
		if filter == nil {
			return errors.New("ReplyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type replyPager struct {
	reverse bool
	order   *ReplyOrder
	filter  func(*ReplyQuery) (*ReplyQuery, error)
}

func newReplyPager(opts []ReplyPaginateOption, reverse bool) (*replyPager, error) {
	pager := &replyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultReplyOrder
	}
	return pager, nil
}

func (p *replyPager) applyFilter(query *ReplyQuery) (*ReplyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *replyPager) toCursor(_m *Reply) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *replyPager) applyCursors(query *ReplyQuery, after, before *Cursor) (*ReplyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultReplyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *replyPager) applyOrder(query *ReplyQuery) *ReplyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultReplyOrder.Field {
		query = query.Order(DefaultReplyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *replyPager) orderExpr(query *ReplyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultReplyOrder.Field {
			b.Comma().Ident(DefaultReplyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Reply.
func (_m *ReplyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ReplyPaginateOption,
) (*ReplyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newReplyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &ReplyConnection{Edges: []*ReplyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ReplyOrderField defines the ordering field of Reply.
type ReplyOrderField struct {
	// Value extracts the ordering value from the given Reply.
	Value    func(*Reply) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) reply.OrderOption
	toCursor func(*Reply) Cursor
}

// ReplyOrder defines the ordering of Reply.
type ReplyOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *ReplyOrderField `json:"field"`
}

// DefaultReplyOrder is the default ordering of Reply.
var DefaultReplyOrder = &ReplyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ReplyOrderField{
		Value: func(_m *Reply) (ent.Value, error) {
			return _m.ID, nil
		},
		column: reply.FieldID,
		toTerm: reply.ByID,
		toCursor: func(_m *Reply) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Reply into ReplyEdge.
func (_m *Reply) ToEdge(order *ReplyOrder) *ReplyEdge {
	if order == nil {
		order = DefaultReplyOrder
	}
	return &ReplyEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(_m *User) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (_m *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(_m *User) (ent.Value, error) {
			return _m.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(_m *User) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (_m *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}
