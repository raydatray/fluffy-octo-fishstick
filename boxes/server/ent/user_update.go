// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/coursesection"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/post"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/predicate"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/reply"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdate) SetFirstName(v string) *UserUpdate {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFirstName(v *string) *UserUpdate {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// SetMiddleName sets the "middle_name" field.
func (_u *UserUpdate) SetMiddleName(v string) *UserUpdate {
	_u.mutation.SetMiddleName(v)
	return _u
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableMiddleName(v *string) *UserUpdate {
	if v != nil {
		_u.SetMiddleName(*v)
	}
	return _u
}

// ClearMiddleName clears the value of the "middle_name" field.
func (_u *UserUpdate) ClearMiddleName() *UserUpdate {
	_u.mutation.ClearMiddleName()
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserUpdate) SetLastName(v string) *UserUpdate {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastName(v *string) *UserUpdate {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *UserUpdate) SetPassword(v string) *UserUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePassword(v *string) *UserUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetRole sets the "role" field.
func (_u *UserUpdate) SetRole(v user.Role) *UserUpdate {
	_u.mutation.SetRole(v)
	return _u
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_u *UserUpdate) SetNillableRole(v *user.Role) *UserUpdate {
	if v != nil {
		_u.SetRole(*v)
	}
	return _u
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_u *UserUpdate) AddPostIDs(ids ...int) *UserUpdate {
	_u.mutation.AddPostIDs(ids...)
	return _u
}

// AddPosts adds the "posts" edges to the Post entity.
func (_u *UserUpdate) AddPosts(v ...*Post) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostIDs(ids...)
}

// AddReplyIDs adds the "replies" edge to the Reply entity by IDs.
func (_u *UserUpdate) AddReplyIDs(ids ...int) *UserUpdate {
	_u.mutation.AddReplyIDs(ids...)
	return _u
}

// AddReplies adds the "replies" edges to the Reply entity.
func (_u *UserUpdate) AddReplies(v ...*Reply) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReplyIDs(ids...)
}

// AddTeachingSectionIDs adds the "teaching_sections" edge to the CourseSection entity by IDs.
func (_u *UserUpdate) AddTeachingSectionIDs(ids ...int) *UserUpdate {
	_u.mutation.AddTeachingSectionIDs(ids...)
	return _u
}

// AddTeachingSections adds the "teaching_sections" edges to the CourseSection entity.
func (_u *UserUpdate) AddTeachingSections(v ...*CourseSection) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTeachingSectionIDs(ids...)
}

// AddTeachingAssistantSectionIDs adds the "teaching_assistant_sections" edge to the CourseSection entity by IDs.
func (_u *UserUpdate) AddTeachingAssistantSectionIDs(ids ...int) *UserUpdate {
	_u.mutation.AddTeachingAssistantSectionIDs(ids...)
	return _u
}

// AddTeachingAssistantSections adds the "teaching_assistant_sections" edges to the CourseSection entity.
func (_u *UserUpdate) AddTeachingAssistantSections(v ...*CourseSection) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTeachingAssistantSectionIDs(ids...)
}

// AddCourseAssistantSectionIDs adds the "course_assistant_sections" edge to the CourseSection entity by IDs.
func (_u *UserUpdate) AddCourseAssistantSectionIDs(ids ...int) *UserUpdate {
	_u.mutation.AddCourseAssistantSectionIDs(ids...)
	return _u
}

// AddCourseAssistantSections adds the "course_assistant_sections" edges to the CourseSection entity.
func (_u *UserUpdate) AddCourseAssistantSections(v ...*CourseSection) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCourseAssistantSectionIDs(ids...)
}

// AddEnrolledSectionIDs adds the "enrolled_sections" edge to the CourseSection entity by IDs.
func (_u *UserUpdate) AddEnrolledSectionIDs(ids ...int) *UserUpdate {
	_u.mutation.AddEnrolledSectionIDs(ids...)
	return _u
}

// AddEnrolledSections adds the "enrolled_sections" edges to the CourseSection entity.
func (_u *UserUpdate) AddEnrolledSections(v ...*CourseSection) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEnrolledSectionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (_u *UserUpdate) ClearPosts() *UserUpdate {
	_u.mutation.ClearPosts()
	return _u
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (_u *UserUpdate) RemovePostIDs(ids ...int) *UserUpdate {
	_u.mutation.RemovePostIDs(ids...)
	return _u
}

// RemovePosts removes "posts" edges to Post entities.
func (_u *UserUpdate) RemovePosts(v ...*Post) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostIDs(ids...)
}

// ClearReplies clears all "replies" edges to the Reply entity.
func (_u *UserUpdate) ClearReplies() *UserUpdate {
	_u.mutation.ClearReplies()
	return _u
}

// RemoveReplyIDs removes the "replies" edge to Reply entities by IDs.
func (_u *UserUpdate) RemoveReplyIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveReplyIDs(ids...)
	return _u
}

// RemoveReplies removes "replies" edges to Reply entities.
func (_u *UserUpdate) RemoveReplies(v ...*Reply) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReplyIDs(ids...)
}

// ClearTeachingSections clears all "teaching_sections" edges to the CourseSection entity.
func (_u *UserUpdate) ClearTeachingSections() *UserUpdate {
	_u.mutation.ClearTeachingSections()
	return _u
}

// RemoveTeachingSectionIDs removes the "teaching_sections" edge to CourseSection entities by IDs.
func (_u *UserUpdate) RemoveTeachingSectionIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveTeachingSectionIDs(ids...)
	return _u
}

// RemoveTeachingSections removes "teaching_sections" edges to CourseSection entities.
func (_u *UserUpdate) RemoveTeachingSections(v ...*CourseSection) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTeachingSectionIDs(ids...)
}

// ClearTeachingAssistantSections clears all "teaching_assistant_sections" edges to the CourseSection entity.
func (_u *UserUpdate) ClearTeachingAssistantSections() *UserUpdate {
	_u.mutation.ClearTeachingAssistantSections()
	return _u
}

// RemoveTeachingAssistantSectionIDs removes the "teaching_assistant_sections" edge to CourseSection entities by IDs.
func (_u *UserUpdate) RemoveTeachingAssistantSectionIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveTeachingAssistantSectionIDs(ids...)
	return _u
}

// RemoveTeachingAssistantSections removes "teaching_assistant_sections" edges to CourseSection entities.
func (_u *UserUpdate) RemoveTeachingAssistantSections(v ...*CourseSection) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTeachingAssistantSectionIDs(ids...)
}

// ClearCourseAssistantSections clears all "course_assistant_sections" edges to the CourseSection entity.
func (_u *UserUpdate) ClearCourseAssistantSections() *UserUpdate {
	_u.mutation.ClearCourseAssistantSections()
	return _u
}

// RemoveCourseAssistantSectionIDs removes the "course_assistant_sections" edge to CourseSection entities by IDs.
func (_u *UserUpdate) RemoveCourseAssistantSectionIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveCourseAssistantSectionIDs(ids...)
	return _u
}

// RemoveCourseAssistantSections removes "course_assistant_sections" edges to CourseSection entities.
func (_u *UserUpdate) RemoveCourseAssistantSections(v ...*CourseSection) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCourseAssistantSectionIDs(ids...)
}

// ClearEnrolledSections clears all "enrolled_sections" edges to the CourseSection entity.
func (_u *UserUpdate) ClearEnrolledSections() *UserUpdate {
	_u.mutation.ClearEnrolledSections()
	return _u
}

// RemoveEnrolledSectionIDs removes the "enrolled_sections" edge to CourseSection entities by IDs.
func (_u *UserUpdate) RemoveEnrolledSectionIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveEnrolledSectionIDs(ids...)
	return _u
}

// RemoveEnrolledSections removes "enrolled_sections" edges to CourseSection entities.
func (_u *UserUpdate) RemoveEnrolledSections(v ...*CourseSection) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEnrolledSectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := _u.mutation.MiddleName(); ok {
		_spec.SetField(user.FieldMiddleName, field.TypeString, value)
	}
	if _u.mutation.MiddleNameCleared() {
		_spec.ClearField(user.FieldMiddleName, field.TypeString)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if _u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostsIDs(); len(nodes) > 0 && !_u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepliesTable,
			Columns: []string{user.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !_u.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepliesTable,
			Columns: []string{user.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepliesTable,
			Columns: []string{user.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeachingSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeachingSectionsTable,
			Columns: user.TeachingSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTeachingSectionsIDs(); len(nodes) > 0 && !_u.mutation.TeachingSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeachingSectionsTable,
			Columns: user.TeachingSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeachingSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeachingSectionsTable,
			Columns: user.TeachingSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeachingAssistantSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeachingAssistantSectionsTable,
			Columns: user.TeachingAssistantSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTeachingAssistantSectionsIDs(); len(nodes) > 0 && !_u.mutation.TeachingAssistantSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeachingAssistantSectionsTable,
			Columns: user.TeachingAssistantSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeachingAssistantSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeachingAssistantSectionsTable,
			Columns: user.TeachingAssistantSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CourseAssistantSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CourseAssistantSectionsTable,
			Columns: user.CourseAssistantSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCourseAssistantSectionsIDs(); len(nodes) > 0 && !_u.mutation.CourseAssistantSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CourseAssistantSectionsTable,
			Columns: user.CourseAssistantSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CourseAssistantSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CourseAssistantSectionsTable,
			Columns: user.CourseAssistantSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EnrolledSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EnrolledSectionsTable,
			Columns: user.EnrolledSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEnrolledSectionsIDs(); len(nodes) > 0 && !_u.mutation.EnrolledSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EnrolledSectionsTable,
			Columns: user.EnrolledSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EnrolledSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EnrolledSectionsTable,
			Columns: user.EnrolledSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdateOne) SetFirstName(v string) *UserUpdateOne {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFirstName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// SetMiddleName sets the "middle_name" field.
func (_u *UserUpdateOne) SetMiddleName(v string) *UserUpdateOne {
	_u.mutation.SetMiddleName(v)
	return _u
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableMiddleName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetMiddleName(*v)
	}
	return _u
}

// ClearMiddleName clears the value of the "middle_name" field.
func (_u *UserUpdateOne) ClearMiddleName() *UserUpdateOne {
	_u.mutation.ClearMiddleName()
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserUpdateOne) SetLastName(v string) *UserUpdateOne {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *UserUpdateOne) SetPassword(v string) *UserUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePassword(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetRole sets the "role" field.
func (_u *UserUpdateOne) SetRole(v user.Role) *UserUpdateOne {
	_u.mutation.SetRole(v)
	return _u
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableRole(v *user.Role) *UserUpdateOne {
	if v != nil {
		_u.SetRole(*v)
	}
	return _u
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_u *UserUpdateOne) AddPostIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddPostIDs(ids...)
	return _u
}

// AddPosts adds the "posts" edges to the Post entity.
func (_u *UserUpdateOne) AddPosts(v ...*Post) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostIDs(ids...)
}

// AddReplyIDs adds the "replies" edge to the Reply entity by IDs.
func (_u *UserUpdateOne) AddReplyIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddReplyIDs(ids...)
	return _u
}

// AddReplies adds the "replies" edges to the Reply entity.
func (_u *UserUpdateOne) AddReplies(v ...*Reply) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddReplyIDs(ids...)
}

// AddTeachingSectionIDs adds the "teaching_sections" edge to the CourseSection entity by IDs.
func (_u *UserUpdateOne) AddTeachingSectionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddTeachingSectionIDs(ids...)
	return _u
}

// AddTeachingSections adds the "teaching_sections" edges to the CourseSection entity.
func (_u *UserUpdateOne) AddTeachingSections(v ...*CourseSection) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTeachingSectionIDs(ids...)
}

// AddTeachingAssistantSectionIDs adds the "teaching_assistant_sections" edge to the CourseSection entity by IDs.
func (_u *UserUpdateOne) AddTeachingAssistantSectionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddTeachingAssistantSectionIDs(ids...)
	return _u
}

// AddTeachingAssistantSections adds the "teaching_assistant_sections" edges to the CourseSection entity.
func (_u *UserUpdateOne) AddTeachingAssistantSections(v ...*CourseSection) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTeachingAssistantSectionIDs(ids...)
}

// AddCourseAssistantSectionIDs adds the "course_assistant_sections" edge to the CourseSection entity by IDs.
func (_u *UserUpdateOne) AddCourseAssistantSectionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddCourseAssistantSectionIDs(ids...)
	return _u
}

// AddCourseAssistantSections adds the "course_assistant_sections" edges to the CourseSection entity.
func (_u *UserUpdateOne) AddCourseAssistantSections(v ...*CourseSection) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCourseAssistantSectionIDs(ids...)
}

// AddEnrolledSectionIDs adds the "enrolled_sections" edge to the CourseSection entity by IDs.
func (_u *UserUpdateOne) AddEnrolledSectionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddEnrolledSectionIDs(ids...)
	return _u
}

// AddEnrolledSections adds the "enrolled_sections" edges to the CourseSection entity.
func (_u *UserUpdateOne) AddEnrolledSections(v ...*CourseSection) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEnrolledSectionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (_u *UserUpdateOne) ClearPosts() *UserUpdateOne {
	_u.mutation.ClearPosts()
	return _u
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (_u *UserUpdateOne) RemovePostIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemovePostIDs(ids...)
	return _u
}

// RemovePosts removes "posts" edges to Post entities.
func (_u *UserUpdateOne) RemovePosts(v ...*Post) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostIDs(ids...)
}

// ClearReplies clears all "replies" edges to the Reply entity.
func (_u *UserUpdateOne) ClearReplies() *UserUpdateOne {
	_u.mutation.ClearReplies()
	return _u
}

// RemoveReplyIDs removes the "replies" edge to Reply entities by IDs.
func (_u *UserUpdateOne) RemoveReplyIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveReplyIDs(ids...)
	return _u
}

// RemoveReplies removes "replies" edges to Reply entities.
func (_u *UserUpdateOne) RemoveReplies(v ...*Reply) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveReplyIDs(ids...)
}

// ClearTeachingSections clears all "teaching_sections" edges to the CourseSection entity.
func (_u *UserUpdateOne) ClearTeachingSections() *UserUpdateOne {
	_u.mutation.ClearTeachingSections()
	return _u
}

// RemoveTeachingSectionIDs removes the "teaching_sections" edge to CourseSection entities by IDs.
func (_u *UserUpdateOne) RemoveTeachingSectionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveTeachingSectionIDs(ids...)
	return _u
}

// RemoveTeachingSections removes "teaching_sections" edges to CourseSection entities.
func (_u *UserUpdateOne) RemoveTeachingSections(v ...*CourseSection) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTeachingSectionIDs(ids...)
}

// ClearTeachingAssistantSections clears all "teaching_assistant_sections" edges to the CourseSection entity.
func (_u *UserUpdateOne) ClearTeachingAssistantSections() *UserUpdateOne {
	_u.mutation.ClearTeachingAssistantSections()
	return _u
}

// RemoveTeachingAssistantSectionIDs removes the "teaching_assistant_sections" edge to CourseSection entities by IDs.
func (_u *UserUpdateOne) RemoveTeachingAssistantSectionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveTeachingAssistantSectionIDs(ids...)
	return _u
}

// RemoveTeachingAssistantSections removes "teaching_assistant_sections" edges to CourseSection entities.
func (_u *UserUpdateOne) RemoveTeachingAssistantSections(v ...*CourseSection) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTeachingAssistantSectionIDs(ids...)
}

// ClearCourseAssistantSections clears all "course_assistant_sections" edges to the CourseSection entity.
func (_u *UserUpdateOne) ClearCourseAssistantSections() *UserUpdateOne {
	_u.mutation.ClearCourseAssistantSections()
	return _u
}

// RemoveCourseAssistantSectionIDs removes the "course_assistant_sections" edge to CourseSection entities by IDs.
func (_u *UserUpdateOne) RemoveCourseAssistantSectionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveCourseAssistantSectionIDs(ids...)
	return _u
}

// RemoveCourseAssistantSections removes "course_assistant_sections" edges to CourseSection entities.
func (_u *UserUpdateOne) RemoveCourseAssistantSections(v ...*CourseSection) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCourseAssistantSectionIDs(ids...)
}

// ClearEnrolledSections clears all "enrolled_sections" edges to the CourseSection entity.
func (_u *UserUpdateOne) ClearEnrolledSections() *UserUpdateOne {
	_u.mutation.ClearEnrolledSections()
	return _u
}

// RemoveEnrolledSectionIDs removes the "enrolled_sections" edge to CourseSection entities by IDs.
func (_u *UserUpdateOne) RemoveEnrolledSectionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveEnrolledSectionIDs(ids...)
	return _u
}

// RemoveEnrolledSections removes "enrolled_sections" edges to CourseSection entities.
func (_u *UserUpdateOne) RemoveEnrolledSections(v ...*CourseSection) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEnrolledSectionIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := _u.mutation.MiddleName(); ok {
		_spec.SetField(user.FieldMiddleName, field.TypeString, value)
	}
	if _u.mutation.MiddleNameCleared() {
		_spec.ClearField(user.FieldMiddleName, field.TypeString)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if _u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostsIDs(); len(nodes) > 0 && !_u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepliesTable,
			Columns: []string{user.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !_u.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepliesTable,
			Columns: []string{user.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RepliesTable,
			Columns: []string{user.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeachingSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeachingSectionsTable,
			Columns: user.TeachingSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTeachingSectionsIDs(); len(nodes) > 0 && !_u.mutation.TeachingSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeachingSectionsTable,
			Columns: user.TeachingSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeachingSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeachingSectionsTable,
			Columns: user.TeachingSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeachingAssistantSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeachingAssistantSectionsTable,
			Columns: user.TeachingAssistantSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTeachingAssistantSectionsIDs(); len(nodes) > 0 && !_u.mutation.TeachingAssistantSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeachingAssistantSectionsTable,
			Columns: user.TeachingAssistantSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeachingAssistantSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeachingAssistantSectionsTable,
			Columns: user.TeachingAssistantSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CourseAssistantSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CourseAssistantSectionsTable,
			Columns: user.CourseAssistantSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCourseAssistantSectionsIDs(); len(nodes) > 0 && !_u.mutation.CourseAssistantSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CourseAssistantSectionsTable,
			Columns: user.CourseAssistantSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CourseAssistantSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CourseAssistantSectionsTable,
			Columns: user.CourseAssistantSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EnrolledSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EnrolledSectionsTable,
			Columns: user.EnrolledSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEnrolledSectionsIDs(); len(nodes) > 0 && !_u.mutation.EnrolledSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EnrolledSectionsTable,
			Columns: user.EnrolledSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EnrolledSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.EnrolledSectionsTable,
			Columns: user.EnrolledSectionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coursesection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
