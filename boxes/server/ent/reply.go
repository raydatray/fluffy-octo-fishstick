// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/post"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/reply"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/user"
)

// Reply is the model entity for the Reply schema.
type Reply struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReplyQuery when eager-loading is set.
	Edges        ReplyEdges `json:"edges"`
	post_replies *int
	user_replies *int
	selectValues sql.SelectValues
}

// ReplyEdges holds the relations/edges for other nodes in the graph.
type ReplyEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReplyEdges) AuthorOrErr() (*User, error) {
	if e.Author != nil {
		return e.Author, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "author"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReplyEdges) PostOrErr() (*Post, error) {
	if e.Post != nil {
		return e.Post, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: post.Label}
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reply) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reply.FieldID:
			values[i] = new(sql.NullInt64)
		case reply.FieldContent:
			values[i] = new(sql.NullString)
		case reply.ForeignKeys[0]: // post_replies
			values[i] = new(sql.NullInt64)
		case reply.ForeignKeys[1]: // user_replies
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reply fields.
func (_m *Reply) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reply.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case reply.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				_m.Content = value.String
			}
		case reply.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field post_replies", value)
			} else if value.Valid {
				_m.post_replies = new(int)
				*_m.post_replies = int(value.Int64)
			}
		case reply.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_replies", value)
			} else if value.Valid {
				_m.user_replies = new(int)
				*_m.user_replies = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Reply.
// This includes values selected through modifiers, order, etc.
func (_m *Reply) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the Reply entity.
func (_m *Reply) QueryAuthor() *UserQuery {
	return NewReplyClient(_m.config).QueryAuthor(_m)
}

// QueryPost queries the "post" edge of the Reply entity.
func (_m *Reply) QueryPost() *PostQuery {
	return NewReplyClient(_m.config).QueryPost(_m)
}

// Update returns a builder for updating this Reply.
// Note that you need to call Reply.Unwrap() before calling this method if this Reply
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Reply) Update() *ReplyUpdateOne {
	return NewReplyClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Reply entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Reply) Unwrap() *Reply {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reply is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Reply) String() string {
	var builder strings.Builder
	builder.WriteString("Reply(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("content=")
	builder.WriteString(_m.Content)
	builder.WriteByte(')')
	return builder.String()
}

// Replies is a parsable slice of Reply.
type Replies []*Reply
