// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (_m *Course) DiscussionBoard(ctx context.Context) (*DiscussionBoard, error) {
	result, err := _m.Edges.DiscussionBoardOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryDiscussionBoard().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (_m *Course) Sections(ctx context.Context) (result []*CourseSection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedSections(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.SectionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QuerySections().All(ctx)
	}
	return result, err
}

func (_m *CourseSection) Course(ctx context.Context) (*Course, error) {
	result, err := _m.Edges.CourseOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryCourse().Only(ctx)
	}
	return result, err
}

func (_m *CourseSection) Professors(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedProfessors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.ProfessorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryProfessors().All(ctx)
	}
	return result, err
}

func (_m *CourseSection) TeachingAssistants(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedTeachingAssistants(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.TeachingAssistantsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryTeachingAssistants().All(ctx)
	}
	return result, err
}

func (_m *CourseSection) CourseAssistants(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedCourseAssistants(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.CourseAssistantsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryCourseAssistants().All(ctx)
	}
	return result, err
}

func (_m *CourseSection) Students(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedStudents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.StudentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryStudents().All(ctx)
	}
	return result, err
}

func (_m *DiscussionBoard) Posts(ctx context.Context) (result []*Post, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.PostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryPosts().All(ctx)
	}
	return result, err
}

func (_m *DiscussionBoard) Course(ctx context.Context) (*Course, error) {
	result, err := _m.Edges.CourseOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryCourse().Only(ctx)
	}
	return result, err
}

func (_m *Post) Author(ctx context.Context) (*User, error) {
	result, err := _m.Edges.AuthorOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryAuthor().Only(ctx)
	}
	return result, err
}

func (_m *Post) Board(ctx context.Context) (*DiscussionBoard, error) {
	result, err := _m.Edges.BoardOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryBoard().Only(ctx)
	}
	return result, err
}

func (_m *Post) Replies(ctx context.Context) (result []*Reply, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedReplies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.RepliesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryReplies().All(ctx)
	}
	return result, err
}

func (_m *Reply) Author(ctx context.Context) (*User, error) {
	result, err := _m.Edges.AuthorOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryAuthor().Only(ctx)
	}
	return result, err
}

func (_m *Reply) Post(ctx context.Context) (*Post, error) {
	result, err := _m.Edges.PostOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryPost().Only(ctx)
	}
	return result, err
}

func (_m *User) Posts(ctx context.Context) (result []*Post, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.PostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryPosts().All(ctx)
	}
	return result, err
}

func (_m *User) Replies(ctx context.Context) (result []*Reply, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedReplies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.RepliesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryReplies().All(ctx)
	}
	return result, err
}

func (_m *User) TeachingSections(ctx context.Context) (result []*CourseSection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedTeachingSections(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.TeachingSectionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryTeachingSections().All(ctx)
	}
	return result, err
}

func (_m *User) TeachingAssistantSections(ctx context.Context) (result []*CourseSection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedTeachingAssistantSections(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.TeachingAssistantSectionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryTeachingAssistantSections().All(ctx)
	}
	return result, err
}

func (_m *User) CourseAssistantSections(ctx context.Context) (result []*CourseSection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedCourseAssistantSections(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.CourseAssistantSectionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryCourseAssistantSections().All(ctx)
	}
	return result, err
}

func (_m *User) EnrolledSections(ctx context.Context) (result []*CourseSection, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedEnrolledSections(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.EnrolledSectionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryEnrolledSections().All(ctx)
	}
	return result, err
}
