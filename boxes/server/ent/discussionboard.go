// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/course"
	"github.com/raydatray/fluffy-octo-fishstick/boxes/server/ent/discussionboard"
)

// DiscussionBoard is the model entity for the DiscussionBoard schema.
type DiscussionBoard struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscussionBoardQuery when eager-loading is set.
	Edges                   DiscussionBoardEdges `json:"edges"`
	course_discussion_board *int
	selectValues            sql.SelectValues
}

// DiscussionBoardEdges holds the relations/edges for other nodes in the graph.
type DiscussionBoardEdges struct {
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedPosts map[string][]*Post
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e DiscussionBoardEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[0] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscussionBoardEdges) CourseOrErr() (*Course, error) {
	if e.Course != nil {
		return e.Course, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: course.Label}
	}
	return nil, &NotLoadedError{edge: "course"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscussionBoard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case discussionboard.FieldID:
			values[i] = new(sql.NullInt64)
		case discussionboard.FieldName:
			values[i] = new(sql.NullString)
		case discussionboard.ForeignKeys[0]: // course_discussion_board
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscussionBoard fields.
func (_m *DiscussionBoard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discussionboard.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case discussionboard.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case discussionboard.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field course_discussion_board", value)
			} else if value.Valid {
				_m.course_discussion_board = new(int)
				*_m.course_discussion_board = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DiscussionBoard.
// This includes values selected through modifiers, order, etc.
func (_m *DiscussionBoard) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPosts queries the "posts" edge of the DiscussionBoard entity.
func (_m *DiscussionBoard) QueryPosts() *PostQuery {
	return NewDiscussionBoardClient(_m.config).QueryPosts(_m)
}

// QueryCourse queries the "course" edge of the DiscussionBoard entity.
func (_m *DiscussionBoard) QueryCourse() *CourseQuery {
	return NewDiscussionBoardClient(_m.config).QueryCourse(_m)
}

// Update returns a builder for updating this DiscussionBoard.
// Note that you need to call DiscussionBoard.Unwrap() before calling this method if this DiscussionBoard
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *DiscussionBoard) Update() *DiscussionBoardUpdateOne {
	return NewDiscussionBoardClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the DiscussionBoard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *DiscussionBoard) Unwrap() *DiscussionBoard {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: DiscussionBoard is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *DiscussionBoard) String() string {
	var builder strings.Builder
	builder.WriteString("DiscussionBoard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedPosts returns the Posts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *DiscussionBoard) NamedPosts(name string) ([]*Post, error) {
	if _m.Edges.namedPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *DiscussionBoard) appendNamedPosts(name string, edges ...*Post) {
	if _m.Edges.namedPosts == nil {
		_m.Edges.namedPosts = make(map[string][]*Post)
	}
	if len(edges) == 0 {
		_m.Edges.namedPosts[name] = []*Post{}
	} else {
		_m.Edges.namedPosts[name] = append(_m.Edges.namedPosts[name], edges...)
	}
}

// DiscussionBoards is a parsable slice of DiscussionBoard.
type DiscussionBoards []*DiscussionBoard
